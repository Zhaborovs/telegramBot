from telethon import TelegramClient, events
import asyncio
import json
import re
from datetime import datetime
import hashlib
from init_config import ConfigInitializer

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
config = ConfigInitializer.load_config()
if not config:
    print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞
session_name = f"bot_session_{config['api_id']}"
client = TelegramClient(session_name, int(config['api_id']), config['api_hash'])

# –¶–µ–ª–µ–≤–æ–π –±–æ—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
TARGET_BOT = config.get('bot_name', '@syntxaibot')

class PromptTracker:
    def __init__(self):
        self.last_prompt = None
        self.prompt_history = set()
        self.current_video_prompt = None
        self.pending_downloads = {}  # {message_id: prompt}

    def is_duplicate(self, prompt):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–æ–º–ø—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
        if prompt == self.last_prompt:
            return True
        
        # –°–æ–∑–¥–∞–µ–º —Ö–µ—à –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        prompt_hash = hashlib.md5(prompt.encode()).hexdigest()
        if prompt_hash in self.prompt_history:
            return True
            
        self.last_prompt = prompt
        self.prompt_history.add(prompt_hash)
        return False

    def set_current_video_prompt(self, prompt, message_id):
        self.current_video_prompt = prompt
        self.pending_downloads[message_id] = prompt

    def get_prompt_for_video(self, message_id):
        return self.pending_downloads.get(message_id)

    def clear_download(self, message_id):
        if message_id in self.pending_downloads:
            del self.pending_downloads[message_id]

prompt_tracker = PromptTracker()

@client.on(events.NewMessage(from_users=TARGET_BOT))
async def handle_bot_messages(event):
    global request_success
    message_text = event.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–º–ø—Ç–µ
    if "üìç –í–∞—à –∑–∞–ø—Ä–æ—Å:" in message_text:
        prompt = re.search(r'üìç –í–∞—à –∑–∞–ø—Ä–æ—Å:\s*(.+)', message_text).group(1)
        prompt_tracker.set_current_video_prompt(prompt, event.message.id)
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∏–¥–µ–æ
    if event.message.video:
        prompt = prompt_tracker.get_prompt_for_video(event.message.id)
        if prompt:
            # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –ø—Ä–æ–º–ø—Ç–∞
            safe_filename = "".join(x for x in prompt if x.isalnum() or x in (' ', '-', '_'))[:100]
            filename = f"{safe_filename}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.mp4"
            
            try:
                await client.download_media(event.message, file=f"downloads/{filename}")
                print(f"‚úÖ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫: {filename}")
                prompt_tracker.clear_download(event.message.id)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}")

async def send_prompt(prompt):
    if prompt_tracker.is_duplicate(prompt):
        print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç –ø—Ä–æ–º–ø—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
        return False
    
    try:
        await client.send_message(TARGET_BOT, prompt)
        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–æ–º–ø—Ç: {prompt}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–º–ø—Ç–∞: {e}")
        return False

async def main():
    await client.start(phone=config['phone_number'])
    
    while True:
        command = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É (/video, –∏–ª–∏ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞): ")
        
        if command.lower() == 'q':
            break
            
        if command == '/video':
            await client.send_message(TARGET_BOT, '/video')
            await asyncio.sleep(2)
            await client.send_message(TARGET_BOT, 'sora')
            await asyncio.sleep(2)
            
            prompt = input("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç: ")
            if await send_prompt(prompt):
                print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ...")
            else:
                print("‚ùå –ü—Ä–æ–º–ø—Ç –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω") 