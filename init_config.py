import os

class ConfigInitializer:
    @staticmethod
    def create_default_config():
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        config_template = '''# Telegram API credentials
api_id=YOUR_API_ID
api_hash=YOUR_API_HASH
bot_name=@syntxaibot

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –∏ –ø–∞–ø–∫–∞–º
downloads_path=downloaded_videos
prompts_file=prompt.txt
table_file=prompts_table.csv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
model_number=1
parallel_requests=1
wait_time_minutes=20
retry_attempts=3

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_level=INFO
log_file=bot.log

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:
# 1 = üåô SORA
# 2 = ‚ûï Hailuo MiniMax
# 3 = üì¶ RunWay: Gen-3
# 4 = üé¨ Kling 1.6
# 5 = üéØ Pika 2.0
# 6 = üëÅ Act-One (–ê–≤–∞—Ç–∞—Ä—ã 2.0)
# 7 = üå´ Luma: DM
# 8 = ü¶ã RW: –°—Ç–∏–ª–∏–∑–∞—Ç–æ—Ä'''

        return config_template

    @staticmethod
    def ensure_config_exists():
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç –µ–≥–æ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏"""
        config_path = 'config.txt'
        config_created = False

        if not os.path.exists(config_path):
            config_template = ConfigInitializer.create_default_config()
            with open(config_path, 'w', encoding='utf-8') as f:
                f.write(config_template)
            print(f"\n–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_path}")
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª–µ config.txt –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É")
            config_created = True

        return config_created

    @staticmethod
    def load_config():
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
        if ConfigInitializer.ensure_config_exists():
            return None

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        config = {}
        with open('config.txt', 'r', encoding='utf-8') as f:
            for line in f:
                if '=' in line and not line.startswith('#'):
                    key, value = line.strip().split('=')
                    config[key.strip()] = value.strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ['api_id', 'api_hash']
        default_values = ['YOUR_API_ID', 'YOUR_API_HASH']
        
        for field in required_fields:
            if field not in config or config[field] in default_values:
                print(f"\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ {field} –≤ config.txt")
                return None

        return config

    @staticmethod
    def check_config():
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∫–æ–Ω—Ñ–∏–≥–∞"""
        config = ConfigInitializer.load_config()
        if not config:
            return None

        required_fields = ['api_id', 'api_hash']
        default_values = ['YOUR_API_ID', 'YOUR_API_HASH']
        
        for field in required_fields:
            if field not in config or config[field] in default_values:
                print(f"\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ {field} –≤ config.txt")
                return None

        return config 