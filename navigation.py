import asyncio

class TelegramNavigator:
    def __init__(self, client, bot, config, message_monitor, logger=None):
        self.client = client
        self.bot = bot
        self.config = config
        self.message_monitor = message_monitor
        self.logger = logger
        self.models = {
            '1': 'üåô SORA',
            '2': '‚ûï Hailuo MiniMax',
            '3': 'üì¶ RunWay: Gen-3',
            '4': 'üé¨ Kling 1.6',
            '5': 'üéØ Pika 2.0',
            '6': 'üëÅ Act-One (–ê–≤–∞—Ç–∞—Ä—ã 2.0)',
            '7': 'üå´ Luma: DM',
            '8': 'ü¶ã RW: –°—Ç–∏–ª–∏–∑–∞—Ç–æ—Ä'
        }

    def set_model(self, model_number):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö
        model_number: –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏ (—Å—Ç—Ä–æ–∫–∞ –æ—Ç '1' –¥–æ '8')
        """
        if model_number in self.models:
            self.config['model_number'] = model_number
            message = f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å: {self.models[model_number]}"
            print(message)
            
            if self.logger:
                self.logger.log_app_event("MODEL_CHANGE", message, 
                                        extra_info={"model_number": model_number, "model_name": self.models[model_number]})
            return True
        else:
            message = f"–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏ {model_number}. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: –æ—Ç 1 –¥–æ 8."
            print(message)
            
            if self.logger:
                self.logger.log_app_event("MODEL_ERROR", message, "ERROR", 
                                        {"attempted_model": model_number})
            return False

    async def navigate_and_send_prompt(self, prompt_data, slot=None):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–º–ø—Ç –∏ –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞
        prompt_data: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞
        slot: –Ω–æ–º–µ—Ä —Å–ª–æ—Ç–∞ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤—É—é
            model_number = self.config.get('model_number', '1')
            model = self.models.get(model_number, self.models['1'])
            
            if self.logger:
                self.logger.log_app_event("NAVIGATION_START", 
                                        f"–ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–º–ø—Ç–∞ {prompt_data['id']} –≤ —Å–ª–æ—Ç–µ {slot}",
                                        extra_info={"model": model})
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –º–æ–¥–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
            if self.message_monitor.is_model_limited(model):
                message = f"\n–ú–æ–¥–µ–ª—å {model} –¥–æ—Å—Ç–∏–≥–ª–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ (—Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {self.message_monitor.model_limits.get(model, 0)})"
                print(message)
                print(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —Å–Ω—è—Ç–∏—è –ª–∏–º–∏—Ç–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ {model}...")
                
                if self.logger:
                    self.logger.log_model_limit(model, self.message_monitor.model_limits.get(model, 0), prompt_data['id'])
                
                # –ñ–¥–µ–º —Å–Ω—è—Ç–∏—è –ª–∏–º–∏—Ç–∞
                await self.wait_for_limit_release(model)
                print(f"–õ–∏–º–∏—Ç –¥–ª—è –º–æ–¥–µ–ª–∏ {model} —Å–Ω—è—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–æ–º–ø—Ç–∞")
                
                if self.logger:
                    self.logger.log_app_event("LIMIT_RELEASED", 
                                            f"–õ–∏–º–∏—Ç –¥–ª—è –º–æ–¥–µ–ª–∏ {model} —Å–Ω—è—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–æ–º–ø—Ç–∞ {prompt_data['id']}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –µ—â–µ —Ä–∞–∑ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
                if self.message_monitor.is_model_limited(model):
                    message = f"–õ–∏–º–∏—Ç –¥–ª—è –º–æ–¥–µ–ª–∏ {model} –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è"
                    print(message)
                    
                    if self.logger:
                        self.logger.log_app_event("LIMIT_PERSISTS", message, "WARNING", 
                                                {"prompt_id": prompt_data['id'], "model": model})
                        
                    # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –∫–∞–∫ –æ–∂–∏–¥–∞—é—â–∏–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å 
                    self.message_monitor.table_manager.mark_pending(prompt_data['id'])
                    return False
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –≤ –º–æ–Ω–∏—Ç–æ—Ä–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
            if not self.message_monitor.set_current_task(prompt_data['id'], prompt_data['prompt'], model, slot):
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å (–≤–æ–∑–º–æ–∂–Ω–æ, –ª–∏–º–∏—Ç), –æ—Ç–º–µ—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –∫–∞–∫ –æ–∂–∏–¥–∞—é—â–∏–π
                self.message_monitor.table_manager.mark_pending(prompt_data['id'])
                
                if self.logger:
                    self.logger.log_app_event("TASK_SET_FAILED", 
                                            f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ {prompt_data['id']} –≤ —Å–ª–æ—Ç–µ {slot}",
                                            "ERROR")
                return False

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /video –∏ —Å—Ä–∞–∑—É –º–æ–¥–µ–ª—å
            if self.logger:
                self.logger.log_outgoing("/video", self.config.get('bot_name', 'Unknown'), "COMMAND")
                
            await self.client.send_message(self.bot, '/video')
            
            if self.logger:
                self.logger.log_outgoing(model, self.config.get('bot_name', 'Unknown'), "MODEL",
                                      {"model_number": model_number})
                
            await self.client.send_message(self.bot, model)
            await asyncio.sleep(0.5)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç
            print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–æ–º–ø—Ç (–°–ª–æ—Ç {slot}): {prompt_data['prompt']}")
            
            if self.logger:
                self.logger.log_outgoing(prompt_data['prompt'], self.config.get('bot_name', 'Unknown'), "PROMPT",
                                      {"prompt_id": prompt_data['id'], "slot": slot})
                
            await self.client.send_message(self.bot, prompt_data['prompt'])

            print(f"–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ (–°–ª–æ—Ç {slot})...")
            if self.logger:
                self.logger.log_app_event("WAITING_VIDEO", f"–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ –≤ —Å–ª–æ—Ç–µ {slot}")
                
            return await self.message_monitor.wait_for_video(slot)

        except Exception as e:
            error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ —Å–ª–æ—Ç–µ {slot}: {e}"
            print(error_message)
            
            if self.logger:
                self.logger.log_exception(e, context=f"–ü—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ {prompt_data['id']} –≤ —Å–ª–æ—Ç–µ {slot}")
                
            return False
            
    async def wait_for_limit_release(self, model=None):
        """
        –û–∂–∏–¥–∞–µ—Ç —Å–Ω—è—Ç–∏—è –ª–∏–º–∏—Ç–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –æ–∂–∏–¥–∞–µ—Ç —Å–Ω—è—Ç–∏—è –ª–∏–º–∏—Ç–∞ –¥–ª—è –ª—é–±–æ–π –º–æ–¥–µ–ª–∏
        """
        if model is None:
            # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            model_number = self.config.get('model_number', '1')
            model = self.models.get(model_number, self.models['1'])
            
        if not self.message_monitor.is_model_limited(model):
            # –ï—Å–ª–∏ –ª–∏–º–∏—Ç–∞ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True
            return True
            
        print(f"–û–∂–∏–¥–∞–µ–º —Å–Ω—è—Ç–∏—è –ª–∏–º–∏—Ç–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ {model} (—Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {self.message_monitor.model_limits.get(model, 0)})")
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è
        max_attempts = 3
        current_attempt = 0
        
        while current_attempt < max_attempts:
            current_attempt += 1
            print(f"–ü–æ–ø—ã—Ç–∫–∞ {current_attempt}/{max_attempts} –æ–∂–∏–¥–∞–Ω–∏—è —Å–Ω—è—Ç–∏—è –ª–∏–º–∏—Ç–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ {model}")
            
            # –ü—Ä–æ–±—É–µ–º –æ–∂–∏–¥–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –ª—é–±–æ–≥–æ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç —Å–Ω—è—Ç—å –ª–∏–º–∏—Ç
            try:
                success = await self.message_monitor.wait_for_any_video_received()
                if success:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Å–Ω—è—Ç –ª–∏–º–∏—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
                    if not self.message_monitor.is_model_limited(model):
                        print(f"–õ–∏–º–∏—Ç –¥–ª—è –º–æ–¥–µ–ª–∏ {model} —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç")
                        return True
                    else:
                        print(f"–ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ, –Ω–æ –ª–∏–º–∏—Ç –¥–ª—è –º–æ–¥–µ–ª–∏ {model} –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏, –µ—Å–ª–∏ –ª–∏–º–∏—Ç –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
                else:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –≤–∏–¥–µ–æ –¥–ª—è —Å–Ω—è—Ç–∏—è –ª–∏–º–∏—Ç–∞ –º–æ–¥–µ–ª–∏ {model}")
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –≤–∏–¥–µ–æ, –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    await asyncio.sleep(5)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ —Å–Ω—è—Ç–∏—è –ª–∏–º–∏—Ç–∞: {e}")
                await asyncio.sleep(2)
        
        print(f"–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Å–Ω—è—Ç–∏—è –ª–∏–º–∏—Ç–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ {model} –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
        return False 