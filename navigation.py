import asyncio

class TelegramNavigator:
    def __init__(self, client, bot, config, message_monitor):
        self.client = client
        self.bot = bot
        self.config = config
        self.message_monitor = message_monitor
        self.models = {
            '1': 'üåô SORA',
            '2': '‚ûï Hailuo MiniMax',
            '3': 'üì¶ RunWay: Gen-3',
            '4': 'üé¨ Kling 1.6',
            '5': 'üéØ Pika 2.0',
            '6': 'üëÅ Act-One (–ê–≤–∞—Ç–∞—Ä—ã 2.0)',
            '7': 'üå´ Luma: DM',
            '8': 'ü¶ã RW: –°—Ç–∏–ª–∏–∑–∞—Ç–æ—Ä'
        }

    async def navigate_and_send_prompt(self, prompt_data, slot=None):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–º–ø—Ç –∏ –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞
        prompt_data: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞
        slot: –Ω–æ–º–µ—Ä —Å–ª–æ—Ç–∞ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            model_number = self.config.get('model_number', '1')
            model = self.models.get(model_number, self.models['1'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –º–æ–¥–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
            if self.message_monitor.is_model_limited(model):
                print(f"–ú–æ–¥–µ–ª—å {model} –¥–æ—Å—Ç–∏–≥–ª–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤")
                return False
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –≤ –º–æ–Ω–∏—Ç–æ—Ä–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
            if not self.message_monitor.set_current_task(prompt_data['id'], prompt_data['prompt'], model, slot):
                return False

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /video –∏ —Å—Ä–∞–∑—É –º–æ–¥–µ–ª—å
            await self.client.send_message(self.bot, '/video')
            await self.client.send_message(self.bot, model)
            await asyncio.sleep(0.5)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç
            print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–æ–º–ø—Ç (–°–ª–æ—Ç {slot}): {prompt_data['prompt']}")
            await self.client.send_message(self.bot, prompt_data['prompt'])

            print(f"–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ (–°–ª–æ—Ç {slot})...")
            return await self.message_monitor.wait_for_video(slot)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ —Å–ª–æ—Ç–µ {slot}: {e}")
            return False
            
    async def wait_for_limit_release(self, model=None):
        """
        –û–∂–∏–¥–∞–µ—Ç —Å–Ω—è—Ç–∏—è –ª–∏–º–∏—Ç–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –æ–∂–∏–¥–∞–µ—Ç —Å–Ω—è—Ç–∏—è –ª–∏–º–∏—Ç–∞ –¥–ª—è –ª—é–±–æ–π –º–æ–¥–µ–ª–∏
        """
        if model is None:
            # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            model_number = self.config.get('model_number', '1')
            model = self.models.get(model_number, self.models['1'])
            
        if not self.message_monitor.is_model_limited(model):
            # –ï—Å–ª–∏ –ª–∏–º–∏—Ç–∞ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True
            return True
            
        print(f"–û–∂–∏–¥–∞–µ–º —Å–Ω—è—Ç–∏—è –ª–∏–º–∏—Ç–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ {model} (—Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {self.message_monitor.model_limits.get(model, 0)})")
        # –û–∂–∏–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è –ª—é–±–æ–≥–æ –≤–∏–¥–µ–æ
        return await self.message_monitor.wait_for_any_video_received() 