import asyncio
import re
from datetime import datetime
from telethon import events

class TelegramNavigator:
    def __init__(self, client, bot, config, message_monitor):
        self.client = client
        self.bot = bot
        self.config = config
        self.message_monitor = message_monitor
        self.models = {
            '1': 'üåô SORA',
            '2': '‚ûï Hailuo MiniMax',
            '3': 'üì¶ RunWay: Gen-3',
            '4': 'üé¨ Kling 1.6',
            '5': 'üéØ Pika 2.0',
            '6': 'üëÅ Act-One (–ê–≤–∞—Ç–∞—Ä—ã 2.0)',
            '7': 'üå´ Luma: DM',
            '8': 'ü¶ã RW: –°—Ç–∏–ª–∏–∑–∞—Ç–æ—Ä'
        }
        self.wait_timeout = int(config.get('command_timeout', '30'))  # –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É
        self.retry_count = int(config.get('retry_count', '2'))  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–º–ø—Ç–∞
        self.extended_wait_time = int(config.get('extended_wait_time', '60'))  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
        
        # –î–æ–±–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞
        self.model_ready_patterns = [
            r'–æ—Ç–ø—Ä–∞–≤—å—Ç–µ.*—Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ',
            r'–∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
            r'–≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å',
            r'—Ç–∞—Ä–∏—Ñ:.*0\.00'
        ]

    async def wait_for_model_ready(self, timeout=10):
        """–û–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–æ–º–ø—Ç"""
        ready_event = asyncio.Event()
        
        @self.client.on(events.NewMessage(from_users=self.bot))
        async def temp_handler(event):
            message_text = event.message.text or ''
            for pattern in self.model_ready_patterns:
                if re.search(pattern, message_text.lower()):
                    print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: '{message_text[:50]}...'")
                    ready_event.set()
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                    self.client.remove_event_handler(temp_handler)
                    return
        
        try:
            print(f"–û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏ –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–æ–º–ø—Ç (—Ç–∞–π–º–∞—É—Ç {timeout} —Å–µ–∫)...")
            await asyncio.wait_for(ready_event.wait(), timeout=timeout)
            print("–ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–æ–º–ø—Ç")
            return True
        except asyncio.TimeoutError:
            print("–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏")
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ —Å–ª—É—á–∞–µ —Ç–∞–π–º–∞—É—Ç–∞
            self.client.remove_event_handler(temp_handler)
            return False
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
            import traceback
            print(f"–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ:\n{traceback.format_exc()}")
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            self.client.remove_event_handler(temp_handler)
            return False

    async def navigate_and_send_prompt(self, prompt_data, slot=None):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–º–ø—Ç –∏ –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞
        prompt_data: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞
        slot: –Ω–æ–º–µ—Ä —Å–ª–æ—Ç–∞ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            print(f"\n=== –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –≤ —Å–ª–æ—Ç–µ {slot} ===")
            
            model_number = self.config.get('model_number', '1')
            model = self.models.get(model_number, self.models['1'])
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –≤ –º–æ–Ω–∏—Ç–æ—Ä–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
            if not self.message_monitor.set_current_task(prompt_data['id'], prompt_data['prompt'], model, slot):
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è —Å–ª–æ—Ç–∞ {slot}")
                return False
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /video –∏ –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞
            print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /video...")
            await self.client.send_message(self.bot, '/video')
            await asyncio.sleep(2.0)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –∏ –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞
            print(f"–í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å: {model}...")
            await self.client.send_message(self.bot, model)
            
            # –ñ–¥–µ–º, –ø–æ–∫–∞ –±–æ—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–æ–º–ø—Ç
            model_ready = await self.wait_for_model_ready(timeout=15)
            if not model_ready:
                print("–ë–æ—Ç –Ω–µ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–æ–º–ø—Ç, –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å –≤—ã–±–æ—Ä–æ–º –º–æ–¥–µ–ª–∏")
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–ª–æ—Ç–∞
                if slot in self.message_monitor.slot_status:
                    self.message_monitor.slot_status[slot].update({
                        'status': self.message_monitor.STATUS_ERROR,
                        'last_update_time': datetime.now(),
                        'last_status_message': '–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏'
                    })
                return False

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å - –ø—Ä–æ–º–ø—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
            self.message_monitor.table_manager.mark_prompt_sent(prompt_data['id'], model)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç
            print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç (–°–ª–æ—Ç {slot}): {prompt_data['prompt']}")
            try:
                await self.client.send_message(self.bot, prompt_data['prompt'])
                print(f"–ü—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Å–ª–æ—Ç–µ {slot}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–º–ø—Ç–∞ –≤ —Å–ª–æ—Ç–µ {slot}: {str(e)}")
                import traceback
                print(f"–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ:\n{traceback.format_exc()}")
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–ª–æ—Ç–∞
                if slot in self.message_monitor.slot_status:
                    self.message_monitor.slot_status[slot].update({
                        'status': self.message_monitor.STATUS_ERROR,
                        'last_update_time': datetime.now(),
                        'last_status_message': f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–º–ø—Ç–∞: {str(e)}'
                    })
                return False
            
            # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã —Å–ª–æ—Ç–æ–≤
            self.message_monitor.print_slot_statuses()
            
            # –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            print(f"–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–°–ª–æ—Ç {slot})...")
            generation_confirmed = await self.message_monitor.wait_for_generation_start(slot, timeout=self.wait_timeout)
            
            if not generation_confirmed:
                print(f"–ù–µ –ø–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ —Å–ª–æ—Ç–µ {slot}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
                if self.message_monitor.check_limit_detected(slot):
                    print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–ª–æ—Ç–µ {slot}")
                    return False
                
                # –í–º–µ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                print(f"–£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
                
                # –ü—Ä–æ–±—É–µ–º –¥–æ–∂–¥–∞—Ç—å—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
                generation_confirmed = await self.message_monitor.wait_for_generation_start(slot, timeout=self.extended_wait_time)
                
                if not generation_confirmed:
                    print(f"–ù–µ –ø–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–∂–µ –ø–æ—Å–ª–µ —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ.")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
                    if self.message_monitor.check_limit_detected(slot):
                        print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–ª–æ—Ç–µ {slot}")
                        return False
            else:
                print(f"–ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–ª–æ—Ç–∞ {slot}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å - –æ–∂–∏–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ
            self.message_monitor.table_manager.mark_waiting_video(prompt_data['id'], model)
            
            print(f"–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ (–°–ª–æ—Ç {slot})...")
            result = await self.message_monitor.wait_for_video(slot)
            
            # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã —Å–ª–æ—Ç–æ–≤
            self.message_monitor.print_slot_statuses()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return result
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ —Å–ª–æ—Ç–µ {slot}: {str(e)}")
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
            import traceback
            print(f"–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ:\n{traceback.format_exc()}")
            return False 