import os
import sys
import subprocess
import platform
import shutil
from pathlib import Path

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ Windows
class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'

def print_header(text):
    """–í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª—å"""
    print(f"{Colors.HEADER}{Colors.BOLD}=== {text} ==={Colors.ENDC}")

def print_step(text):
    """–í—ã–≤–æ–¥–∏—Ç —à–∞–≥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å"""
    print(f"{Colors.BLUE}>> {text}{Colors.ENDC}")

def print_success(text):
    """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –≤ –∫–æ–Ω—Å–æ–ª—å"""
    print(f"{Colors.GREEN}‚úì {text}{Colors.ENDC}")

def print_warning(text):
    """–í—ã–≤–æ–¥–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å"""
    print(f"{Colors.WARNING}‚ö† {text}{Colors.ENDC}")

def print_error(text):
    """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –∫–æ–Ω—Å–æ–ª—å"""
    print(f"{Colors.FAIL}‚úó {text}{Colors.ENDC}")

def run_command(command, check=True):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        result = subprocess.run(command, shell=True, check=check, capture_output=True, text=True)
        return result.returncode == 0, result.stdout, result.stderr
    except subprocess.CalledProcessError as e:
        return False, "", str(e)

def check_python():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É Python –∏ –≤—ã–≤–æ–¥–∏—Ç –≤–µ—Ä—Å–∏—é"""
    print_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python...")
    
    try:
        version = sys.version.split()[0]
        if version.startswith('3.'):
            major, minor = map(int, version.split('.')[:2])
            if major == 3 and minor >= 10:
                print_success(f"–ù–∞–π–¥–µ–Ω Python –≤–µ—Ä—Å–∏–∏ {version}")
                return True
            else:
                print_warning(f"–í–µ—Ä—Å–∏—è Python {version} –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º")
                print_warning("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è Python 3.10 –∏–ª–∏ –≤—ã—à–µ")
                return True
        else:
            print_error(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –≤–µ—Ä—Å–∏—è Python: {version}")
            return False
    except Exception as e:
        print_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é Python: {e}")
        return False

def setup_virtual_env():
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
    print_step("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    venv_dir = Path(".venv")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if venv_dir.exists():
        print_warning("–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        recreate = input("–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ? (–¥/–Ω): ").lower()
        if recreate == '–¥' or recreate == 'y':
            print_step("–£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
            shutil.rmtree(venv_dir, ignore_errors=True)
        else:
            print_step("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
            return True
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    success, _, error = run_command(f"{sys.executable} -m venv .venv")
    if success:
        print_success("–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        return True
    else:
        print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {error}")
        return False

def get_pip_path():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ pip –≤–Ω—É—Ç—Ä–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    if platform.system() == "Windows":
        return ".venv\\Scripts\\pip"
    else:
        return ".venv/bin/pip"

def install_dependencies():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ requirements.txt"""
    print_step("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    if not os.path.exists("requirements.txt"):
        print_error("–§–∞–π–ª requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    pip_path = get_pip_path()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º pip
    print_step("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip...")
    update_cmd = f"{pip_path} install --upgrade pip"
    run_command(update_cmd, check=False)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    print_step("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ –∏–∑ requirements.txt...")
    success, output, error = run_command(f"{pip_path} install -r requirements.txt")
    
    if success:
        print_success("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True
    else:
        print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {error}")
        return False

def create_directories():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    print_step("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    
    directories = ["logs", "downloaded_videos"]
    
    for directory in directories:
        if not os.path.exists(directory):
            os.makedirs(directory)
            print_success(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")
        else:
            print_warning(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {directory} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    return True

def create_desktop_shortcut():
    """–°–æ–∑–¥–∞–µ—Ç —è—Ä–ª—ã–∫ –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è Windows)"""
    if platform.system() != "Windows":
        print_warning("–°–æ–∑–¥–∞–Ω–∏–µ —è—Ä–ª—ã–∫–∞ –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è Windows")
        return False
    
    print_step("–°–æ–∑–¥–∞–Ω–∏–µ —è—Ä–ª—ã–∫–∞ –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ...")
    
    try:
        desktop_path = os.path.join(os.path.expanduser("~"), "Desktop")
        if not os.path.exists(desktop_path):
            print_warning("–ü—É—Ç—å –∫ —Ä–∞–±–æ—á–µ–º—É —Å—Ç–æ–ª—É –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –°–æ–∑–¥–∞–µ–º —è—Ä–ª—ã–∫ —Å –ø–æ–º–æ—â—å—é PowerShell
        current_dir = os.path.abspath(os.path.dirname(__file__))
        run_bat_path = os.path.join(current_dir, "run.bat")
        shortcut_path = os.path.join(desktop_path, "TelegramBot.lnk")
        
        # PowerShell —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —è—Ä–ª—ã–∫–∞
        ps_script = f"""
        $WshShell = New-Object -ComObject WScript.Shell
        $Shortcut = $WshShell.CreateShortcut("{shortcut_path}")
        $Shortcut.TargetPath = "{run_bat_path}"
        $Shortcut.WorkingDirectory = "{current_dir}"
        $Shortcut.Description = "Telegram Bot"
        $Shortcut.Save()
        """
        
        with open("create_shortcut.ps1", "w") as f:
            f.write(ps_script)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º PowerShell —Å–∫—Ä–∏–ø—Ç
        success, _, error = run_command("powershell -ExecutionPolicy Bypass -File create_shortcut.ps1")
        os.remove("create_shortcut.ps1")
        
        if success:
            print_success(f"–Ø—Ä–ª—ã–∫ —Å–æ–∑–¥–∞–Ω –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ: {shortcut_path}")
            return True
        else:
            print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —è—Ä–ª—ã–∫–∞: {error}")
            return False
    
    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —è—Ä–ª—ã–∫–∞: {e}")
        return False

def setup_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
    print_step("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ config.txt
    if os.path.exists("config.txt"):
        print_warning("–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return True
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ init_config.py
    try:
        import init_config
        initializer = init_config.ConfigInitializer()
        initializer.ensure_config_exists()
        print_success("–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ config.txt")
        print_warning("–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å API ID –∏ API Hash –≤ —Ñ–∞–π–ª–µ config.txt")
        return True
    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é
        config_template = """# Telegram API credentials
api_id=YOUR_API_ID
api_hash=YOUR_API_HASH
bot_name=@syntxaibot

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –∏ –ø–∞–ø–∫–∞–º
downloads_path=downloaded_videos
prompts_file=prompt.txt
table_file=prompts_table.csv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
model_number=1
parallel_requests=1
wait_time_minutes=20
retry_attempts=3

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_level=INFO
log_file=bot.log
log_dir=logs
enable_console_logs=true
detailed_logging=true

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:
# 1 = üåô SORA
# 2 = ‚ûï Hailuo MiniMax
# 3 = üì¶ RunWay: Gen-3
# 4 = üé¨ Kling 1.6
# 5 = üéØ Pika 2.0
# 6 = üëÅ Act-One (–ê–≤–∞—Ç–∞—Ä—ã 2.0)
# 7 = üå´ Luma: DM"""
        
        with open("config.txt", "w", encoding="utf-8") as f:
            f.write(config_template)
        
        print_success("–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ config.txt")
        print_warning("–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å API ID –∏ API Hash –≤ —Ñ–∞–π–ª–µ config.txt")
        return True

def create_run_scripts():
    """–°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print_step("–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞...")
    
    # –°–æ–∑–¥–∞–µ–º run.bat –¥–ª—è Windows
    if not os.path.exists("run.bat"):
        with open("run.bat", "w") as f:
            f.write('@echo off\n')
            f.write('cls\n')
            f.write('title Telegram Bot\n')
            f.write('color 0A\n')
            f.write('echo –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...\n')
            f.write('echo.\n')
            f.write('cd "%~dp0"\n')
            f.write('if exist .venv (\n')
            f.write('    call .venv\\Scripts\\activate\n')
            f.write('    python main.py\n')
            f.write(') else (\n')
            f.write('    echo –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É.\n')
            f.write('    pause\n')
            f.write(')\n')
            f.write('pause\n')
        print_success("–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª run.bat")
    else:
        print_warning("–§–∞–π–ª run.bat —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # –°–æ–∑–¥–∞–µ–º run.sh –¥–ª—è Linux/macOS
    if platform.system() != "Windows":
        if not os.path.exists("run.sh"):
            with open("run.sh", "w") as f:
                f.write('#!/bin/bash\n')
                f.write('echo "–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞..."\n')
                f.write('echo ""\n')
                f.write('if [ -d ".venv" ]; then\n')
                f.write('    source .venv/bin/activate\n')
                f.write('    python main.py\n')
                f.write('else\n')
                f.write('    echo "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É."\n')
                f.write('    read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞..."\n')
                f.write('fi\n')
            os.chmod("run.sh", 0o755)
            print_success("–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª run.sh")
        else:
            print_warning("–§–∞–π–ª run.sh —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    os.system('color' if platform.system() == 'Windows' else 'tput init')
    
    print("\n")
    print_header("–£–°–¢–ê–ù–û–í–ö–ê TELEGRAM –ë–û–¢–ê")
    print("\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
    if not check_python():
        print_error("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∞ –±–µ–∑ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –≤–µ—Ä—Å–∏–∏ Python")
        return False
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if not setup_virtual_env():
        print_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not install_dependencies():
        print_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    create_directories()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    setup_config()
    
    # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∑–∞–ø—É—Å–∫–∞
    create_run_scripts()
    
    # –°–æ–∑–¥–∞–µ–º —è—Ä–ª—ã–∫ –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è Windows)
    if platform.system() == "Windows":
        create_desktop_shortcut()
    
    print("\n")
    print_header("–£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û")
    print("\n")
    print_success("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è:")
    if platform.system() == "Windows":
        print("  - –Ø—Ä–ª—ã–∫ –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ")
        print("  - –§–∞–π–ª run.bat –≤ –ø–∞–ø–∫–µ —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π")
    else:
        print("  - –§–∞–π–ª run.sh –≤ –ø–∞–ø–∫–µ —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π")
    
    print("\n")
    print_warning("–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å API ID –∏ API Hash –≤ —Ñ–∞–π–ª–µ config.txt")
    print("\n")
    
    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
    return True

if __name__ == "__main__":
    main() 