import os
import asyncio
from telethon import events
import re
from datetime import datetime
import hashlib
import gc

class VideoDownloader:
    def __init__(self, table_manager, config, client=None, logger=None):
        self.table_manager = table_manager
        self.config = config
        self.logger = logger
        self.client = client  # –°—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º client –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.download_path = config.get('downloads_path', 'downloaded_videos')
        self.retry_attempts = int(config.get('retry_attempts', '3'))
        self.last_download_success = False
        self.last_saved_filepath = None
        self.current_download = None
        self.message_monitor = None  # –°—Å—ã–ª–∫–∞ –Ω–∞ MessageMonitor –¥–æ–±–∞–≤–∏—Ç—Å—è –ø–æ—Ç–æ–º
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not os.path.exists(self.download_path):
            os.makedirs(self.download_path)
            if self.logger:
                self.logger.log_app_event("DIRECTORY_CREATED", f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≤–∏–¥–µ–æ: {self.download_path}")
        
    def sanitize_filename(self, filename):
        # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        return re.sub(r'[<>:"/\\|?*]', '_', filename)
    
    def get_first_5_words(self, text):
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        words = text.split()[:5]
        return '_'.join(words)
    
    def get_video_filename(self, prompt_id, model):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        model_name = model.split()[0].replace('üåô', '').replace('‚ûï', '').replace('üì¶', '')\
                    .replace('üé¨', '').replace('üéØ', '').replace('üëÅ', '')\
                    .replace('üå´', '').replace('ü¶ã', '').strip()
        return f"{timestamp}_{prompt_id}_{model_name}.mp4"
    
    async def download_video(self, message, prompt_id, model):
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–¥–µ–æ
            prompt_id: ID –ø—Ä–æ–º–ø—Ç–∞
            model: –ú–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            model_name = model.split()[0].replace('üåô', '').replace('‚ûï', '').replace('üì¶', '')\
                         .replace('üé¨', '').replace('üéØ', '').replace('üëÅ', '')\
                         .replace('üå´', '').replace('ü¶ã', '').strip()
                         
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–º–ø—Ç–∞
            prompt_status = self.table_manager.get_status(prompt_id)
            if prompt_status:
                prompt = prompt_status.get('prompt', '')
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–ª–æ–≤ –∏–∑ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                if prompt:
                    prompt_short = self.get_first_5_words(prompt)
                    prompt_short = self.sanitize_filename(prompt_short)
                else:
                    prompt_short = ""
            else:
                prompt_short = ""
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            file_name = f"{timestamp}_{prompt_id}_{model_name}_{prompt_short}.mp4"
            file_path = os.path.join(self.download_path, file_name)
            
            print(f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ: {message.media.document.mime_type}, —Ä–∞–∑–º–µ—Ä: {message.media.document.size} –±–∞–π—Ç")
            print(f"‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ –≤ —Ñ–∞–π–ª: {file_path}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            from telethon import TelegramClient
            client = None
            if hasattr(self, 'client') and isinstance(self.client, TelegramClient):
                client = self.client
            elif self.message_monitor and hasattr(self.message_monitor, 'client'):
                client = self.message_monitor.client
                
            # –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞
            await message.download_media(file_path)
            
            print(f"‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {file_path}")
            
            if self.logger:
                self.logger.log_video_downloaded(prompt_id, file_path, model, True)
                
            # –û—Ç–º–µ—á–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ
            self.table_manager.mark_completed(prompt_id, model, file_path)
            
            self.last_download_success = True
            self.last_saved_filepath = file_path
            return True
            
        except Exception as e:
            error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {str(e)}"
            print(error_message)
            
            if self.logger:
                self.logger.log_video_downloaded(prompt_id, "", model, False, str(e))
                self.logger.log_exception(e, context=f"–ü—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ {prompt_id}")
                
            # –û—Ç–º–µ—á–∞–µ–º –æ—à–∏–±–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ
            self.table_manager.mark_error(prompt_id, model, str(e))
            
            self.last_download_success = False
            return False
    
    def extract_model_from_text(self, message_text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –º–æ–¥–µ–ª–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not message_text:
            return None
            
        # –ò—â–µ–º –º–æ–¥–µ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ "üßÆ –ú–æ–¥–µ–ª—å: #Sora" –∏–ª–∏ "–ú–æ–¥–µ–ª—å: #Sora"
        model_patterns = [
            r'(?:\*\*)?üßÆ\s+–ú–æ–¥–µ–ª—å:(?:\*\*)?\s+`?#?([^`\n]+)`?',
            r'–ú–æ–¥–µ–ª—å:\s+`?#?([^`\n]+)`?'
        ]
        
        for pattern in model_patterns:
            model_match = re.search(pattern, message_text, re.IGNORECASE)
            if model_match:
                model_text = model_match.group(1).strip()
                # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏
                if model_text.lower() == 'sora':
                    return 'üåô SORA'
                elif any(m in model_text.lower() for m in ['hailuo', 'minimax']):
                    return '‚ûï Hailuo MiniMax'
                elif any(m in model_text.lower() for m in ['runway', 'gen-3']):
                    return 'üì¶ RunWay: Gen-3'
                elif 'kling' in model_text.lower():
                    return 'üé¨ Kling 1.6'
                elif 'pika' in model_text.lower():
                    return 'üéØ Pika 2.0'
                elif any(m in model_text.lower() for m in ['act-one', '–∞–≤–∞—Ç–∞—Ä—ã']):
                    return 'üëÅ Act-One (–ê–≤–∞—Ç–∞—Ä—ã 2.0)'
                elif 'luma' in model_text.lower():
                    return 'üå´ Luma: DM'
                elif '—Å—Ç–∏–ª–∏–∑–∞—Ç–æ—Ä' in model_text.lower():
                    return 'ü¶ã RW: –°—Ç–∏–ª–∏–∑–∞—Ç–æ—Ä'
                print(f"–ò–∑–≤–ª–µ—á–µ–Ω–∞ –º–æ–¥–µ–ª—å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: {model_text}")
                return model_text
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º, –∏—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        message_lower = message_text.lower()
        models_map = {
            'sora': 'üåô SORA',
            'hailuo': '‚ûï Hailuo MiniMax',
            'minimax': '‚ûï Hailuo MiniMax',
            'runway': 'üì¶ RunWay: Gen-3',
            'gen-3': 'üì¶ RunWay: Gen-3',
            'kling': 'üé¨ Kling 1.6',
            'pika': 'üéØ Pika 2.0',
            'act-one': 'üëÅ Act-One (–ê–≤–∞—Ç–∞—Ä—ã 2.0)',
            '–∞–≤–∞—Ç–∞—Ä—ã': 'üëÅ Act-One (–ê–≤–∞—Ç–∞—Ä—ã 2.0)',
            'luma': 'üå´ Luma: DM',
            '—Å—Ç–∏–ª–∏–∑–∞—Ç–æ—Ä': 'ü¶ã RW: –°—Ç–∏–ª–∏–∑–∞—Ç–æ—Ä'
        }
        
        # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for key, model in models_map.items():
            if key in message_lower:
                return model
        
        return None
        
    async def download_any_video(self, message):
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç –ª—é–±–æ–µ –≤–∏–¥–µ–æ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø—Ä–æ–º–ø—Ç—É
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–¥–µ–æ
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –ø—Ä–æ–º–ø—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            extracted_text = ""
            if message.text:
                extracted_text = message.text
            
            # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –º–æ–¥–µ–ª—å
            model = self.extract_model_from_text(extracted_text)
            if not model:
                model = "Unknown"
                
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ ID –ø—Ä–æ–º–ø—Ç–∞
            prompt_id = str(message.id)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            model_name = model.split()[0].replace('üåô', '').replace('‚ûï', '').replace('üì¶', '')\
                         .replace('üé¨', '').replace('üéØ', '').replace('üëÅ', '')\
                         .replace('üå´', '').replace('ü¶ã', '').strip()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            prompt_short = "unknown"
            if extracted_text:
                # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ "–í–∞—à –∑–∞–ø—Ä–æ—Å:" –µ—Å–ª–∏ –µ—Å—Ç—å
                prompt_match = re.search(r'–í–∞—à –∑–∞–ø—Ä–æ—Å:?\s*`?(.*?)`?$', extracted_text, re.MULTILINE)
                if prompt_match:
                    prompt_text = prompt_match.group(1).strip()
                    prompt_short = self.get_first_5_words(prompt_text)
                    prompt_short = self.sanitize_filename(prompt_short)
                else:
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–ª–æ–≤ –∏–∑ –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
                    prompt_short = self.get_first_5_words(extracted_text)
                    prompt_short = self.sanitize_filename(prompt_short)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            file_name = f"{timestamp}_{prompt_id}_{model_name}_{prompt_short}.mp4"
            file_path = os.path.join(self.download_path, file_name)
            
            print(f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ: {message.media.document.mime_type}, —Ä–∞–∑–º–µ—Ä: {message.media.document.size} –±–∞–π—Ç")
            print(f"‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ –≤ —Ñ–∞–π–ª: {file_path}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            from telethon import TelegramClient
            client = None
            if hasattr(self, 'client') and isinstance(self.client, TelegramClient):
                client = self.client
            elif self.message_monitor and hasattr(self.message_monitor, 'client'):
                client = self.message_monitor.client
                
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            await message.download_media(file_path)
            
            print(f"‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {file_path}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
            if self.logger:
                self.logger.log_app_event("VIDEO_DOWNLOADED", 
                                        f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ: {file_path}", 
                                        extra_info={"prompt_id": prompt_id, "model": model})
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏
            self.last_download_success = True
            self.last_saved_filepath = file_path
            return True
            
        except Exception as e:
            error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ: {str(e)}"
            print(error_message)
            
            if self.logger:
                self.logger.log_app_event("VIDEO_ERROR", 
                                        f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ: {str(e)}", 
                                        "ERROR")
                self.logger.log_exception(e, context="–ü—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ")
            
            self.last_download_success = False
            return False

    async def start_monitoring(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –º–æ–Ω–∏—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
        if hasattr(self, 'monitoring_active') and self.monitoring_active:
            return
        
        self.monitoring_active = True
        
        @self.client.on(events.NewMessage(chats=self.bot))
        async def handler(event):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∏–¥–µ–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if event.message.media and hasattr(event.message.media, 'document'):
                document = event.message.media.document
                if document.mime_type.startswith('video/'):
                    if self.current_prompt and self.current_model:
                        filename = self.get_video_filename(self.current_prompt, self.current_model)
                        filepath = os.path.join(self.download_path, filename)
                        
                        print(f"–ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {filename}")
                        await self.client.download_media(event.message, filepath)
                        print(f"–í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filepath}")
                        
                        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏ –º–æ–¥–µ–ª—å –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                        self.current_prompt = None
                        self.current_model = None

        @self.client.on(events.MessageEdited(chats=self.bot))
        async def edited_handler(event):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            try:
                message_text = event.message.text or ""
                has_video = (hasattr(event.message, 'media') and 
                             event.message.media and 
                             hasattr(event.message.media, 'document') and 
                             event.message.media.document.mime_type.startswith('video/'))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                from message_filter import MessageFilter
                message_filter = MessageFilter()
                if not message_filter.should_process_edited_message(message_text, has_video):
                    return
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∏–¥–µ–æ –≤ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                if has_video:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                    model = self.extract_model_from_text(message_text)
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç, —Å–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
                    current_prompt = self.get_current_prompt()
                    if current_prompt:
                        await self.download_video(event.message, current_prompt, model)
                        if self.logger:
                            self.logger.log_app_event("VIDEO_DOWNLOADED_EDITED", 
                                                   f"–°–∫–∞—á–∞–Ω–æ –≤–∏–¥–µ–æ –∏–∑ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞: {current_prompt[:30]}...")
            except Exception as e:
                if self.logger:
                    self.logger.log_exception(e, context="–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ VideoDownloader")

    def set_current_prompt(self, prompt, model):
        self.current_prompt = prompt
        self.current_model = model 