import os
import asyncio
from telethon import events
import re
from datetime import datetime

class VideoDownloader:
    def __init__(self, table_manager, config, logger=None):
        self.table_manager = table_manager
        self.config = config
        self.logger = logger
        self.base_path = config.get('downloads_path', 'downloaded_videos')
        self.retry_attempts = int(config.get('retry_attempts', '3'))
        self.download_path = "downloaded_videos"
        self.last_download_success = False
        self.last_saved_filepath = None
        self.current_download = None
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not os.path.exists(self.download_path):
            os.makedirs(self.download_path)
            if self.logger:
                self.logger.log_app_event("DIRECTORY_CREATED", f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≤–∏–¥–µ–æ: {self.download_path}")
        
    def sanitize_filename(self, filename):
        # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        return re.sub(r'[<>:"/\\|?*]', '_', filename)
    
    def get_first_5_words(self, text):
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        words = text.split()[:5]
        return '_'.join(words)
    
    def get_video_filename(self, prompt_id, model):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        model_name = model.split()[0].replace('üåô', '').replace('‚ûï', '').replace('üì¶', '')\
                    .replace('üé¨', '').replace('üéØ', '').replace('üëÅ', '')\
                    .replace('üå´', '').replace('ü¶ã', '').strip()
        return f"{timestamp}_{prompt_id}_{model_name}.mp4"
    
    async def download_video(self, message, prompt_id, model):
        try:
            self.current_download = prompt_id
            filename = self.get_video_filename(prompt_id, model)
            filepath = os.path.join(self.base_path, filename)
            
            print(f"–ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {filename}")
            if self.logger:
                self.logger.log_app_event("DOWNLOAD_START", f"–ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ {prompt_id}",
                                      extra_info={"filename": filename, "model": model})
                
            await message.download_media(filepath)
            await asyncio.sleep(2)
            
            if os.path.exists(filepath) and os.path.getsize(filepath) > 0:
                print(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filepath}")
                self.table_manager.mark_completed(prompt_id, model, filepath)
                
                if self.logger:
                    self.logger.log_video_downloaded(prompt_id, filename, model, success=True)
                    
                return True
            else:
                error_message = "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π"
                print(error_message)
                self.table_manager.mark_error(prompt_id, model)
                
                if self.logger:
                    self.logger.log_video_downloaded(prompt_id, filename, model, success=False, error=error_message)
                    
                return False
                
        except Exception as e:
            error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}"
            print(error_message)
            self.table_manager.mark_error(prompt_id, model)
            
            if self.logger:
                self.logger.log_video_downloaded(prompt_id, filename, model, success=False, error=str(e))
                self.logger.log_exception(e, context=f"–ü—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ {prompt_id}")
                
            return False
        finally:
            self.current_download = None
            
    def extract_model_from_text(self, message_text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –º–æ–¥–µ–ª–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not message_text:
            return None
            
        # –ò—â–µ–º –º–æ–¥–µ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ "üßÆ –ú–æ–¥–µ–ª—å: #Sora" –∏–ª–∏ "–ú–æ–¥–µ–ª—å: #Sora"
        model_patterns = [
            r'(?:\*\*)?üßÆ\s+–ú–æ–¥–µ–ª—å:(?:\*\*)?\s+`?#?([^`\n]+)`?',
            r'–ú–æ–¥–µ–ª—å:\s+`?#?([^`\n]+)`?'
        ]
        
        for pattern in model_patterns:
            model_match = re.search(pattern, message_text, re.IGNORECASE)
            if model_match:
                model_text = model_match.group(1).strip()
                # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏
                if model_text.lower() == 'sora':
                    return 'üåô SORA'
                elif any(m in model_text.lower() for m in ['hailuo', 'minimax']):
                    return '‚ûï Hailuo MiniMax'
                elif any(m in model_text.lower() for m in ['runway', 'gen-3']):
                    return 'üì¶ RunWay: Gen-3'
                elif 'kling' in model_text.lower():
                    return 'üé¨ Kling 1.6'
                elif 'pika' in model_text.lower():
                    return 'üéØ Pika 2.0'
                elif any(m in model_text.lower() for m in ['act-one', '–∞–≤–∞—Ç–∞—Ä—ã']):
                    return 'üëÅ Act-One (–ê–≤–∞—Ç–∞—Ä—ã 2.0)'
                elif 'luma' in model_text.lower():
                    return 'üå´ Luma: DM'
                elif '—Å—Ç–∏–ª–∏–∑–∞—Ç–æ—Ä' in model_text.lower():
                    return 'ü¶ã RW: –°—Ç–∏–ª–∏–∑–∞—Ç–æ—Ä'
                print(f"–ò–∑–≤–ª–µ—á–µ–Ω–∞ –º–æ–¥–µ–ª—å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: {model_text}")
                return model_text
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º, –∏—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        message_lower = message_text.lower()
        models_map = {
            'sora': 'üåô SORA',
            'hailuo': '‚ûï Hailuo MiniMax',
            'minimax': '‚ûï Hailuo MiniMax',
            'runway': 'üì¶ RunWay: Gen-3',
            'gen-3': 'üì¶ RunWay: Gen-3',
            'kling': 'üé¨ Kling 1.6',
            'pika': 'üéØ Pika 2.0',
            'act-one': 'üëÅ Act-One (–ê–≤–∞—Ç–∞—Ä—ã 2.0)',
            '–∞–≤–∞—Ç–∞—Ä—ã': 'üëÅ Act-One (–ê–≤–∞—Ç–∞—Ä—ã 2.0)',
            'luma': 'üå´ Luma: DM',
            '—Å—Ç–∏–ª–∏–∑–∞—Ç–æ—Ä': 'ü¶ã RW: –°—Ç–∏–ª–∏–∑–∞—Ç–æ—Ä'
        }
        
        # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for key, model in models_map.items():
            if key in message_lower:
                return model
        
        return None
        
    async def download_any_video(self, message, model_name=None):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø—Ä–æ–º–ø—Ç—É, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–º–ø—Ç–∞
            message_text = message.text or ''
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            all_prompts = self.table_manager.get_all_prompts()
            active_prompts = self.table_manager.get_active_prompts()
            prompt_id = None
            model = model_name or 'unknown'
            prompt_text = None
            found_prompt = None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç "üìç –í–∞—à –∑–∞–ø—Ä–æ—Å:" –∏–ª–∏ "**üìç –í–∞—à –∑–∞–ø—Ä–æ—Å:**"
            extracted_prompt = None
            prompt_patterns = [
                r'(?:\*\*)?üìç\s+–í–∞—à\s+–∑–∞–ø—Ä–æ—Å:(?:\*\*)?\s+`?(.*?)`?(?=\n|$)',
                r'–í–∞—à\s+–∑–∞–ø—Ä–æ—Å:\s+`?(.*?)`?(?=\n|$)'
            ]
            
            for pattern in prompt_patterns:
                prompt_match = re.search(pattern, message_text, re.IGNORECASE | re.DOTALL)
                if prompt_match:
                    extracted_prompt = prompt_match.group(1).strip()
                    print(f"–ò–∑–≤–ª–µ—á–µ–Ω –ø—Ä–æ–º–ø—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: '{extracted_prompt[:50]}...'")
                    break
            
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø—Ä–æ–º–ø—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –∏—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
            if extracted_prompt:
                # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                for prompt in all_prompts:
                    table_prompt_text = prompt.get('prompt', '')
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
                    if table_prompt_text and (
                        table_prompt_text.lower() == extracted_prompt.lower() or
                        table_prompt_text.lower() in extracted_prompt.lower() or
                        extracted_prompt.lower() in table_prompt_text.lower()
                    ):
                        found_prompt = prompt
                        prompt_text = table_prompt_text
                        print(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞: '{prompt_text[:50]}...' (ID: {found_prompt['id']})")
                        break
                
                # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—á–µ—Ç–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                if not found_prompt:
                    best_match = None
                    best_ratio = 0
                    for prompt in all_prompts:
                        table_prompt_text = prompt.get('prompt', '')
                        if not table_prompt_text:
                            continue
                            
                        # –ü—Ä–æ—Å—Ç–∞—è –º–µ—Ç—Ä–∏–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—â–∏—Ö —Å–ª–æ–≤
                        table_words = set(table_prompt_text.lower().split())
                        extracted_words = set(extracted_prompt.lower().split())
                        
                        if not table_words or not extracted_words:
                            continue
                            
                        common_words = table_words & extracted_words
                        ratio = len(common_words) / max(len(table_words), len(extracted_words))
                        
                        if ratio > best_ratio and ratio > 0.5:  # –°—á–∏—Ç–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –±–æ–ª–µ–µ 50% —Å–ª–æ–≤ —Å–æ–≤–ø–∞–¥–∞—é—Ç
                            best_ratio = ratio
                            best_match = prompt
                    
                    if best_match:
                        found_prompt = best_match
                        prompt_text = found_prompt.get('prompt', '')
                        print(f"–ù–∞–π–¥–µ–Ω–æ –Ω–µ—á–µ—Ç–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞: '{prompt_text[:50]}...' (ID: {found_prompt['id']}), —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {best_ratio:.2f}")
            
            # –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ —Ç–µ–∫—Å—Ç–µ, –Ω–∏ —á–µ—Ä–µ–∑ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ –º–æ–¥–µ–ª–∏
            if not found_prompt and model_name and active_prompts:
                matching_prompts = [p for p in active_prompts if p.get('model') == model_name]
                if matching_prompts:
                    found_prompt = matching_prompts[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Å–æ–≤–ø–∞–¥–∞—é—â–∏–π –ø–æ –º–æ–¥–µ–ª–∏
                    prompt_text = found_prompt.get('prompt', '')
                    print(f"–ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏ {model_name}: '{prompt_text[:50]}...' (ID: {found_prompt['id']})")
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –º–æ–¥–µ–ª–∏, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π
                    found_prompt = active_prompts[0]
                    prompt_text = found_prompt.get('prompt', '')
                    print(f"–í–∑—è—Ç –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç: '{prompt_text[:50]}...' (ID: {found_prompt['id']})")
            
            # –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ ID
            if found_prompt:
                prompt_id = found_prompt['id']
                
                # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–¥–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å –∏–∑ –ø—Ä–æ–º–ø—Ç–∞
                if not model_name:
                    model = found_prompt.get('model', 'unknown')
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–∞)
                if model == 'unknown' and message_text:
                    extracted_model = self.extract_model_from_text(message_text)
                    if extracted_model:
                        model = extracted_model
                        print(f"–ò–∑–≤–ª–µ—á–µ–Ω–∞ –º–æ–¥–µ–ª—å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: {model}")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º–ø—Ç–∞
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                model_short = model.split()[0].replace('üåô', '').replace('‚ûï', '').replace('üì¶', '')\
                            .replace('üé¨', '').replace('üéØ', '').replace('üëÅ', '')\
                            .replace('üå´', '').replace('ü¶ã', '').strip()
                
                # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
                # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                if extracted_prompt:
                    prompt_for_filename = extracted_prompt
                else:
                    prompt_for_filename = prompt_text
                
                # –û—á–∏—â–∞–µ–º –æ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–ª–æ–≤
                prompt_words = self.get_first_5_words(prompt_for_filename)
                prompt_words = self.sanitize_filename(prompt_words)
                
                filename = f"{timestamp}_{prompt_id}_{model_short}_{prompt_words}.mp4"
            else:
                # –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º, –Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                
                # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                if model == 'unknown' and message_text:
                    extracted_model = self.extract_model_from_text(message_text)
                    if extracted_model:
                        model = extracted_model
                        print(f"–ò–∑–≤–ª–µ—á–µ–Ω–∞ –º–æ–¥–µ–ª—å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {model}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏
                model_short = model.split()[0].replace('üåô', '').replace('‚ûï', '').replace('üì¶', '')\
                            .replace('üé¨', '').replace('üéØ', '').replace('üëÅ', '')\
                            .replace('üå´', '').replace('ü¶ã', '').strip()
                
                # –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø—Ä–æ–º–ø—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                if extracted_prompt:
                    prompt_words = self.get_first_5_words(extracted_prompt)
                    prompt_words = self.sanitize_filename(prompt_words)
                    filename = f"unknown_{timestamp}_{model_short}_{prompt_words}.mp4"
                else:
                    filename = f"unknown_{timestamp}_{model_short}.mp4"
                
                print(f"–ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ –∫–∞–∫: {filename}")
            
            # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏ —Å–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
            filepath = os.path.join(self.base_path, filename)
            
            print(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ {prompt_id if prompt_id else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} —Å –º–æ–¥–µ–ª—å—é {model}: {filename}")
            if self.logger:
                self.logger.log_app_event("DOWNLOAD_START", 
                                      f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ {prompt_id if prompt_id else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}", 
                                      extra_info={"model": model, "filename": filename})
                
            await message.download_media(filepath)
            
            if os.path.exists(filepath) and os.path.getsize(filepath) > 0:
                print(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filepath}")
                self.last_saved_filepath = filepath
                self.last_download_success = True
                
                if self.logger:
                    self.logger.log_video_downloaded(
                        prompt_id=prompt_id or "unknown",
                        filename=filename,
                        model=model,
                        success=True
                    )
                
                # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –Ω–∞–π–¥–µ–Ω
                if prompt_id:
                    self.table_manager.mark_completed(prompt_id, model, filepath)
                return True
            else:
                error_message = "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π"
                print(error_message)
                self.last_download_success = False
                
                if self.logger:
                    self.logger.log_video_downloaded(
                        prompt_id=prompt_id or "unknown",
                        filename=filename,
                        model=model,
                        success=False,
                        error=error_message
                    )
                    
                return False
                
        except Exception as e:
            error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}"
            print(error_message)
            self.last_download_success = False
            
            if self.logger:
                self.logger.log_exception(e, context="–ü—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –ø—Ä–æ–º–ø—Ç—É")
                
            return False

    async def start_monitoring(self):
        @self.client.on(events.NewMessage(from_users=self.bot))
        async def handler(event):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∏–¥–µ–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if event.message.media and hasattr(event.message.media, 'document'):
                document = event.message.media.document
                if document.mime_type.startswith('video/'):
                    if self.current_prompt and self.current_model:
                        filename = self.get_video_filename(self.current_prompt, self.current_model)
                        filepath = os.path.join(self.download_path, filename)
                        
                        print(f"–ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {filename}")
                        await self.client.download_media(event.message, filepath)
                        print(f"–í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filepath}")
                        
                        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏ –º–æ–¥–µ–ª—å –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                        self.current_prompt = None
                        self.current_model = None
    
    def set_current_prompt(self, prompt, model):
        self.current_prompt = prompt
        self.current_model = model 