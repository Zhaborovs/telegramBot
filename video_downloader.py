import os
import asyncio
from telethon import events
import re
from datetime import datetime

class VideoDownloader:
    def __init__(self, table_manager, config, client=None, bot=None):
        self.table_manager = table_manager
        self.base_path = config.get('downloads_path', 'downloaded_videos')
        self.retry_attempts = int(config.get('retry_attempts', '3'))
        self.download_path = "downloaded_videos"
        self.last_download_success = False
        self.last_saved_filepath = None
        self.current_download = None
        self.client = client
        self.bot = bot
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not os.path.exists(self.download_path):
            os.makedirs(self.download_path)
        
    def sanitize_filename(self, filename):
        # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        return re.sub(r'[<>:"/\\|?*]', '_', filename)
    
    def get_first_5_words(self, text):
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        words = text.split()[:5]
        return '_'.join(words)
    
    def get_video_filename(self, prompt_id, model):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        model_name = model.split()[0].replace('üåô', '').replace('‚ûï', '').replace('üì¶', '')\
                    .replace('üé¨', '').replace('üéØ', '').replace('üëÅ', '')\
                    .replace('üå´', '').replace('ü¶ã', '').strip()
        return f"{timestamp}_{prompt_id}_{model_name}.mp4"
    
    async def download_video(self, message, prompt_id, model):
        try:
            self.current_download = prompt_id
            filename = self.get_video_filename(prompt_id, model)
            filepath = os.path.join(self.base_path, filename)
            
            print(f"–ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {filename}")
            await message.download_media(filepath)
            await asyncio.sleep(2)
            
            if os.path.exists(filepath) and os.path.getsize(filepath) > 0:
                print(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filepath}")
                self.table_manager.mark_completed(prompt_id, model, filepath)
                return True
            else:
                print("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π")
                self.table_manager.mark_error(prompt_id, model)
                return False
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}")
            self.table_manager.mark_error(prompt_id, model)
            return False
        finally:
            self.current_download = None

    async def start_monitoring(self):
        @self.client.on(events.NewMessage(from_users=self.bot))
        async def handler(event):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∏–¥–µ–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if event.message.media and hasattr(event.message.media, 'document'):
                document = event.message.media.document
                if document.mime_type.startswith('video/'):
                    if self.current_prompt and self.current_model:
                        filename = self.get_video_filename(self.current_prompt, self.current_model)
                        filepath = os.path.join(self.download_path, filename)
                        
                        print(f"–ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {filename}")
                        await self.client.download_media(event.message, filepath)
                        print(f"–í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filepath}")
                        
                        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏ –º–æ–¥–µ–ª—å –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                        self.current_prompt = None
                        self.current_model = None
    
    def set_current_prompt(self, prompt, model):
        self.current_prompt = prompt
        self.current_model = model 