import os
import asyncio
from telethon import events
import re
from datetime import datetime

class VideoDownloader:
    def __init__(self, table_manager, config):
        self.table_manager = table_manager
        self.base_path = config.get('downloads_path', 'downloaded_videos')
        self.retry_attempts = int(config.get('retry_attempts', '3'))
        self.download_path = "downloaded_videos"
        self.last_download_success = False
        self.last_saved_filepath = None
        self.current_download = None
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not os.path.exists(self.download_path):
            os.makedirs(self.download_path)
        
    def sanitize_filename(self, filename):
        # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        return re.sub(r'[<>:"/\\|?*]', '_', filename)
    
    def get_first_5_words(self, text):
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        words = text.split()[:5]
        return '_'.join(words)
    
    def get_video_filename(self, prompt_id, model):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        model_name = model.split()[0].replace('üåô', '').replace('‚ûï', '').replace('üì¶', '')\
                    .replace('üé¨', '').replace('üéØ', '').replace('üëÅ', '')\
                    .replace('üå´', '').replace('ü¶ã', '').strip()
        return f"{timestamp}_{prompt_id}_{model_name}.mp4"
    
    async def download_video(self, message, prompt_id, model):
        try:
            self.current_download = prompt_id
            filename = self.get_video_filename(prompt_id, model)
            filepath = os.path.join(self.base_path, filename)
            
            print(f"–ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {filename}")
            await message.download_media(filepath)
            await asyncio.sleep(2)
            
            if os.path.exists(filepath) and os.path.getsize(filepath) > 0:
                print(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filepath}")
                self.table_manager.mark_completed(prompt_id, model, filepath)
                return True
            else:
                print("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π")
                self.table_manager.mark_error(prompt_id, model)
                return False
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}")
            self.table_manager.mark_error(prompt_id, model)
            return False
        finally:
            self.current_download = None
            
    async def download_any_video(self, message, model_name=None):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø—Ä–æ–º–ø—Ç—É, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–º–ø—Ç–∞
            message_text = message.text or ''
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            all_prompts = self.table_manager.get_all_prompts()
            active_prompts = self.table_manager.get_active_prompts()
            prompt_id = None
            model = model_name or 'unknown'
            prompt_text = None
            found_prompt = None
            
            # –ò—â–µ–º –ø—Ä–æ–º–ø—Ç –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å—Ä–∞–≤–Ω–∏–≤–∞—è –µ–≥–æ —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            if message_text:
                # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –ø—Ä–æ–º–ø—Ç –∏–¥–µ—Ç –ø–æ—Å–ª–µ —Ñ—Ä–∞–∑ —Ç–∏–ø–∞ "–í–∞—à–µ –≤–∏–¥–µ–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É:" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                possible_prompt = message_text
                
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –ª—é–±—ã–º –ø—Ä–æ–º–ø—Ç–æ–º –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
                for table_prompt in all_prompts:
                    table_prompt_text = table_prompt.get('prompt', '')
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
                    if table_prompt_text and table_prompt_text.lower() in possible_prompt.lower():
                        found_prompt = table_prompt
                        prompt_text = table_prompt_text
                        print(f"–ù–∞–π–¥–µ–Ω –ø—Ä–æ–º–ø—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: '{prompt_text}' (ID: {found_prompt['id']})")
                        break
            
            # –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –Ω–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –º–æ–¥–µ–ª–∏
            if not found_prompt and active_prompts:
                # –ò—â–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–æ–≤–ø–∞–¥–∞—é—â–µ–π –º–æ–¥–µ–ª–∏
                matching_prompt = None
                for prompt in active_prompts:
                    if model_name and prompt.get('model') == model_name:
                        matching_prompt = prompt
                        break
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–æ–≤–ø–∞–¥–∞—é—â–∏–π –ø—Ä–æ–º–ø—Ç, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π
                found_prompt = matching_prompt or active_prompts[0]
                prompt_text = found_prompt.get('prompt', '')
            
            # –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ ID
            if found_prompt:
                prompt_id = found_prompt['id']
                
                # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–¥–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å –∏–∑ –ø—Ä–æ–º–ø—Ç–∞
                if not model_name:
                    model = found_prompt.get('model', 'unknown')
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º–ø—Ç–∞
                # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–ª–æ–≤ –∏–∑ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                prompt_words = '_'.join(prompt_text.split()[:5])
                # –û—á–∏—â–∞–µ–º –æ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
                prompt_words = ''.join(c if c.isalnum() or c in ['_', '-'] else '_' for c in prompt_words)
                
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                model_short = model.split()[0].replace('üåô', '').replace('‚ûï', '').replace('üì¶', '')\
                            .replace('üé¨', '').replace('üéØ', '').replace('üëÅ', '')\
                            .replace('üå´', '').replace('ü¶ã', '').strip()
                filename = f"{timestamp}_{prompt_id}_{model_short}_{prompt_words}.mp4"
            else:
                # –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                model_short = model.split()[0].replace('üåô', '').replace('‚ûï', '').replace('üì¶', '')\
                            .replace('üé¨', '').replace('üéØ', '').replace('üëÅ', '')\
                            .replace('üå´', '').replace('ü¶ã', '').strip()
                filename = f"unknown_{timestamp}_{model_short}.mp4"
                print(f"–ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ –∫–∞–∫: {filename}")
            
            # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏ —Å–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
            filepath = os.path.join(self.base_path, filename)
            
            print(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ {prompt_id if prompt_id else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} —Å –º–æ–¥–µ–ª—å—é {model}: {filename}")
            await message.download_media(filepath)
            
            if os.path.exists(filepath) and os.path.getsize(filepath) > 0:
                print(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filepath}")
                # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –Ω–∞–π–¥–µ–Ω
                if prompt_id:
                    self.table_manager.mark_completed(prompt_id, model, filepath)
                return True
            else:
                print("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π")
                return False
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}")
            return False

    async def start_monitoring(self):
        @self.client.on(events.NewMessage(from_users=self.bot))
        async def handler(event):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∏–¥–µ–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if event.message.media and hasattr(event.message.media, 'document'):
                document = event.message.media.document
                if document.mime_type.startswith('video/'):
                    if self.current_prompt and self.current_model:
                        filename = self.get_video_filename(self.current_prompt, self.current_model)
                        filepath = os.path.join(self.download_path, filename)
                        
                        print(f"–ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {filename}")
                        await self.client.download_media(event.message, filepath)
                        print(f"–í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filepath}")
                        
                        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏ –º–æ–¥–µ–ª—å –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                        self.current_prompt = None
                        self.current_model = None
    
    def set_current_prompt(self, prompt, model):
        self.current_prompt = prompt
        self.current_model = model 