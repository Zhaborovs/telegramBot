from telethon import events
from datetime import datetime
import asyncio
import os
from message_filter import MessageFilter
from message_logger import MessageLogger
from prompt_matcher import PromptMatcher
import re
import time

class MessageMonitor:
    def __init__(self, client, bot, video_downloader, config, logger=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
        
        Args:
            client: –¢–µ–ª–µ–≥—Ä–∞–º-–∫–ª–∏–µ–Ω—Ç
            bot: –ë–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            video_downloader: –ó–∞–≥—Ä—É–∑—á–∏–∫ –≤–∏–¥–µ–æ, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π table_manager
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            logger: –õ–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–±—ã—Ç–∏–π
        """
        self.client = client
        self.bot = bot
        self.video_downloader = video_downloader
        self.table_manager = video_downloader.table_manager if hasattr(video_downloader, 'table_manager') else None
        
        # –ü–µ—Ä–µ–¥–∞–µ–º client –≤ video_downloader
        if hasattr(self.video_downloader, 'set_client'):
            self.video_downloader.set_client(client)
            self.video_downloader.message_monitor = self
            if logger:
                logger.log_app_event("INIT", "Client —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è video_downloader")
        
        self.config = config
        self.logger = logger  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä
        self.max_slots = int(config.get('parallel_requests', '1'))
        self.active_requests = {}  # slot: {prompt_id, model, event}
        self.message_filter = MessageFilter()
        self.message_logger = MessageLogger()
        
        # –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
        wait_minutes = int(config.get('wait_time_minutes', '20'))
        self.wait_time = wait_minutes * 60  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥—ã
        
        self.current_prompt = {}  # slot: prompt_id
        self.current_model = {}   # slot: model
        self.video_received = {}  # slot: filename
        self.expected_filepath = None
        self.generation_in_progress = False
        self.error_received = False
        self.prompt_history = []  # –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        self.current_video_prompt = None  # –ü—Ä–æ–º–ø—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–∏–¥–µ–æ
        
        # –§–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.monitoring_active = False
        
        # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤
        self.prompt_pattern = re.compile(r'\*\*üìç –í–∞—à –∑–∞–ø—Ä–æ—Å:\*\* `(.+?)`', re.DOTALL)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä–µ–π
        self.current_prompt = {}  # –¢–µ–∫—É—â–∏–µ –ø—Ä–æ–º–ø—Ç—ã –ø–æ —Å–ª–æ—Ç–∞–º
        self.current_model = {}   # –¢–µ–∫—É—â–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ —Å–ª–æ—Ç–∞–º
        self.video_received = {}  # –§–ª–∞–≥–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ –ø–æ —Å–ª–æ—Ç–∞–º
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å–æ –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        self.active_requests = {}
        
        self.max_model_limit = 2  # –ú–∞–∫—Å–∏–º—É–º 2 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –º–æ–¥–µ–ª–∏
        self.waiting_for_any_video = False  # –§–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –ª—é–±–æ–≥–æ –≤–∏–¥–µ–æ –ø—Ä–∏ –ª–∏–º–∏—Ç–µ
        self.any_video_received = asyncio.Event()  # –°–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª—é–±–æ–≥–æ –≤–∏–¥–µ–æ
        self.last_video_info = None
        self.current_request_id = None  # ID —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        self.current_request_time = None  # –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        self.last_sent_prompt = None  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∞–º–∏ –ø—Ä–æ–º–ø—Ç
        self.waiting_for_response = False  # –§–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –Ω–∞—à –∑–∞–ø—Ä–æ—Å
        self.expected_filename = None  # –û–∂–∏–¥–∞–µ–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        self.prompt_matcher = PromptMatcher()  # –î–æ–±–∞–≤–ª—è–µ–º matcher
        self.current_prompt_id = None  # –î–æ–±–∞–≤–ª—è–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        self.startup_cleanup = False  # –§–ª–∞–≥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–ª–æ—Ç–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        self.waiting_for_slot = False  # –§–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Å–ª–æ—Ç–∞
        self.slot_freed = asyncio.Event()  # –°–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Å–ª–æ—Ç–∞
        self.model_limits = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –ª–∏–º–∏—Ç–æ–≤ –º–æ–¥–µ–ª–µ–π
        self.generation_in_progress = False
        self.error_received = False
        self.prompt_history = []  # –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        self.current_video_prompt = None  # –ü—Ä–æ–º–ø—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–∏–¥–µ–æ
        self.expected_prompt = None  # –ü—Ä–æ–º–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π –º—ã –æ–∂–∏–¥–∞–µ–º
        self.received_video_prompt = None  # –ü—Ä–æ–º–ø—Ç –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
        
        # –°–æ–æ–±—â–µ–Ω–∏—è –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        self.generation_start_messages = [
            "‚ö° ULTRA ELITE",
            "–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ",
            "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ",
            "‚ö° –ó–∞–¥–∞—á–∞ –æ–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
            "‚è≥ –û–¥–Ω—É —Å–µ–∫—É–Ω–¥—É"  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        ]
        
        # –¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        self.error_messages = [
            "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
        ]

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ª–∏–º–∏—Ç–µ
        self.limit_messages = [
            "‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"
        ]

        if self.logger:
            self.logger.log_app_event("MONITOR_INIT", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –º–æ–Ω–∏—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π")

    def increase_model_counter(self, model):
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏"""
        if model not in self.model_limits:
            self.model_limits[model] = 0
        self.model_limits[model] += 1
        print(f"–£–≤–µ–ª–∏—á–µ–Ω —Å—á–µ—Ç—á–∏–∫ –º–æ–¥–µ–ª–∏ {model}: {self.model_limits[model]}/{self.max_model_limit}")
        
        if self.logger:
            self.logger.log_app_event("MODEL_COUNTER", f"–£–≤–µ–ª–∏—á–µ–Ω —Å—á–µ—Ç—á–∏–∫ –º–æ–¥–µ–ª–∏ {model}", 
                                    extra_info={"value": self.model_limits[model]})
        
    def decrease_model_counter(self, model):
        """–£–º–µ–Ω—å—à–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –Ω–∞ 1"""
        if model in self.model_limits and self.model_limits[model] > 0:
            self.model_limits[model] -= 1
            print(f"–£–º–µ–Ω—å—à–µ–Ω —Å—á–µ—Ç—á–∏–∫ –º–æ–¥–µ–ª–∏ {model}: {self.model_limits[model]}/{self.max_model_limit}")
            
            # –ï—Å–ª–∏ —Å—á–µ—Ç—á–∏–∫ –±—ã–ª –Ω–∞ –º–∞–∫—Å–∏–º—É–º–µ –∏ —Ç–µ–ø–µ—Ä—å —É–º–µ–Ω—å—à–∏–ª—Å—è, —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–± –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞
            if self.model_limits[model] == self.max_model_limit - 1:
                print(f"–õ–∏–º–∏—Ç –¥–ª—è –º–æ–¥–µ–ª–∏ {model} —Å–Ω—è—Ç (—Å—á–µ—Ç—á–∏–∫ —É–º–µ–Ω—å—à–µ–Ω —Å {self.max_model_limit} –¥–æ {self.model_limits[model]})")
                # –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –∂–¥–µ—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Å–ª–æ—Ç–∞
                if self.waiting_for_slot:
                    print("–°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–± –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞ –¥–ª—è –º–æ–¥–µ–ª–∏")
                    self.slot_freed.set()
                    
                # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –ª—é–±–æ–µ –≤–∏–¥–µ–æ –¥–ª—è —Å–Ω—è—Ç–∏—è –ª–∏–º–∏—Ç–∞
                if self.waiting_for_any_video:
                    print("–°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ —Å–Ω—è—Ç–∏–∏ –ª–∏–º–∏—Ç–∞ –¥–ª—è –º–æ–¥–µ–ª–∏")
                    self.any_video_received.set()

    def set_model_limit(self, model):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥ –ª–∏–º–∏—Ç–∞ –¥–ª—è –º–æ–¥–µ–ª–∏"""
        self.model_limits[model] = self.model_limits.get(model, 0) + 1
        print(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –º–æ–¥–µ–ª–∏ {model}: {self.model_limits[model]}/{self.max_model_limit}")
        
        if self.logger:
            self.logger.log_model_limit(model, self.model_limits[model])

    def is_model_limited(self, model):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∏–≥–ª–∞ –ª–∏ –º–æ–¥–µ–ª—å –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        return self.model_limits.get(model, 0) >= self.max_model_limit

    def set_current_task(self, prompt_id, prompt, model, slot):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
        
        Args:
            prompt_id: ID –ø—Ä–æ–º–ø—Ç–∞
            prompt: –¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞
            model: –ú–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            slot: –ù–æ–º–µ—Ä —Å–ª–æ—Ç–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –º–æ–¥–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
        if self.is_model_limited(model):
            print(f"‚ùå –ú–æ–¥–µ–ª—å {model} –¥–æ—Å—Ç–∏–≥–ª–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü—Ä–æ–º–ø—Ç {prompt_id} –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å.")
            
            # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –∫–∞–∫ –æ–∂–∏–¥–∞—é—â–∏–π
            table_manager = self.get_table_manager()
            if table_manager:
                table_manager.mark_pending(prompt_id)
                
                if self.logger:
                    self.logger.log_app_event("MODEL_LIMITED", 
                                            f"–ú–æ–¥–µ–ª—å {model} –¥–æ—Å—Ç–∏–≥–ª–∞ –ª–∏–º–∏—Ç–∞. –ü—Ä–æ–º–ø—Ç {prompt_id} –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å",
                                            extra_info={"model": model, "prompt_id": prompt_id})
                
            return False
            
        # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –º–æ–¥–µ–ª–∏
        self.increase_model_counter(model)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–µ
        prompt_short = prompt[:30] + "..." if len(prompt) > 30 else prompt
        
        self.active_requests[slot] = {
            'prompt_id': prompt_id,
            'prompt': prompt,
            'model': model,
            'start_time': time.time(),
            'sent_message_id': None,
            'status': 'sending'
        }
        
        # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –∫–∞–∫ –Ω–∞—Ö–æ–¥—è—â–∏–π—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        table_manager = self.get_table_manager()
        if table_manager:
            table_manager.mark_in_progress(prompt_id, model)
            
            if self.logger:
                self.logger.log_app_event("TASK_SET", 
                                        f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ {prompt_id} –≤ —Å–ª–æ—Ç–µ {slot}",
                                        extra_info={"model": model, "slot": slot, "prompt": prompt_short})
        
        print(f"–£–≤–µ–ª–∏—á–µ–Ω —Å—á–µ—Ç—á–∏–∫ –º–æ–¥–µ–ª–∏ {model}: {self.model_limits[model]}/{self.max_model_limit}")
        return True

    async def wait_for_video(self, slot):
        """
        –û–∂–∏–¥–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
        
        Args:
            slot: –ù–æ–º–µ—Ä —Å–ª–æ—Ç–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –≤–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ, False –µ—Å–ª–∏ –∏—Å—Ç–µ–∫ —Ç–∞–π–º–∞—É—Ç
        """
        if slot not in self.active_requests:
            print(f"–û—à–∏–±–∫–∞: —Å–ª–æ—Ç {slot} –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
            return False
            
        request = self.active_requests[slot]
        prompt_id = request['prompt_id']
        model = request['model']
        
        print(f"–û–∂–∏–¥–∞–µ–º –≤–∏–¥–µ–æ –¥–ª—è —Å–ª–æ—Ç–∞ {slot}. –¢–∞–π–º–∞—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {self.wait_time} —Å–µ–∫—É–Ω–¥ ({self.wait_time/60} –º–∏–Ω—É—Ç)")
        
        # –û–∂–∏–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ
        start_time = time.time()
        
        while time.time() - start_time < self.wait_time:
            # –í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ
            if slot in self.video_received and self.video_received[slot]:
                print(f"‚úÖ –í–∏–¥–µ–æ –¥–ª—è —Å–ª–æ—Ç–∞ {slot} –ø–æ–ª—É—á–µ–Ω–æ!")
                
                # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –≤–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ
                self.video_received[slot] = False
                
                # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –º–æ–¥–µ–ª–∏
                self.decrease_model_counter(model)
                print(f"–£–º–µ–Ω—å—à–µ–Ω —Å—á–µ—Ç—á–∏–∫ –º–æ–¥–µ–ª–∏ {model} –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ: {self.model_limits[model]}/{self.max_model_limit}")
                
                # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–ª–æ—Ç
                if slot in self.active_requests:
                    del self.active_requests[slot]
                
                return True
                
            # –ü–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞
            if self.error_received:
                print(f"‚ùå –ü–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –¥–ª—è —Å–ª–æ—Ç–∞ {slot}")
                self.error_received = False
                
                # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –∫–∞–∫ –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–π—Å—è —Å –æ—à–∏–±–∫–æ–π
                table_manager = self.get_table_manager()
                if table_manager:
                    table_manager.mark_error(prompt_id, model, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ")
                    
                # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –º–æ–¥–µ–ª–∏
                self.decrease_model_counter(model)
                print(f"–£–º–µ–Ω—å—à–µ–Ω —Å—á–µ—Ç—á–∏–∫ –º–æ–¥–µ–ª–∏ {model} –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏: {self.model_limits[model]}/{self.max_model_limit}")
                
                # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–ª–æ—Ç
                if slot in self.active_requests:
                    del self.active_requests[slot]
                
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —Å–ª–æ—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω –∏–∑–≤–Ω–µ
            if slot not in self.active_requests:
                print(f"–°–ª–æ—Ç {slot} –±—ã–ª –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
                return False
                
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
            await asyncio.sleep(0.5)
            
        # –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ
        print(f"‚è∞ –ò—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –¥–ª—è —Å–ª–æ—Ç–∞ {slot}")
        
        # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –∫–∞–∫ —Ç–∞–π–º–∞—É—Ç
        table_manager = self.get_table_manager()
        if table_manager:
            table_manager.mark_timeout(prompt_id, model)
            
        # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –º–æ–¥–µ–ª–∏
        self.decrease_model_counter(model)
        print(f"–£–º–µ–Ω—å—à–µ–Ω —Å—á–µ—Ç—á–∏–∫ –º–æ–¥–µ–ª–∏ {model} –∏–∑-–∑–∞ —Ç–∞–π–º–∞—É—Ç–∞: {self.model_limits[model]}/{self.max_model_limit}")
        
        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–ª–æ—Ç
        if slot in self.active_requests:
            del self.active_requests[slot]
            
        return False

    async def wait_for_any_video_received(self):
        """–û–∂–∏–¥–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –ª—é–±–æ–≥–æ –≤–∏–¥–µ–æ (–¥–ª—è —Å–Ω—è—Ç–∏—è –ª–∏–º–∏—Ç–∞)"""
        print("\n–û–∂–∏–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ª—é–±–æ–≥–æ –≤–∏–¥–µ–æ –¥–ª—è —Å–Ω—è—Ç–∏—è –ª–∏–º–∏—Ç–∞...")
        self.waiting_for_any_video = True
        self.any_video_received.clear()
        try:
            await asyncio.wait_for(self.any_video_received.wait(), timeout=self.wait_time)
            print("–ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ, –ª–∏–º–∏—Ç—ã –¥–ª—è –º–æ–¥–µ–ª–µ–π —É–º–µ–Ω—å—à–µ–Ω—ã")
            return True
        except asyncio.TimeoutError:
            print("–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –¥–ª—è —Å–Ω—è—Ç–∏—è –ª–∏–º–∏—Ç–∞")
            return False
        finally:
            self.waiting_for_any_video = False

    async def start_monitoring(self):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.monitoring_active = True
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–æ—Ç –Ω–∞—Å –±–æ—Ç—É)
        @self.client.on(events.NewMessage(outgoing=True, chats=self.bot))
        async def outgoing_handler(event):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –Ω–∞—Å –±–æ—Ç—É"""
            try:
                message_text = event.message.text or ""
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if self.logger:
                    self.logger.log_outgoing(message_text, self.bot.username, "TEXT")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–º
                if len(message_text) > 20 and not message_text.startswith('/'):
                    print(f"\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–æ–º–ø—Ç: {message_text[:30]}...")
                    
                    # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ª–æ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
                    for slot, request in self.active_requests.items():
                        if request['prompt'] == message_text:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                            request['sent_message_id'] = event.message.id
                            print(f"–ü—Ä–æ–º–ø—Ç —Å–≤—è–∑–∞–Ω —Å–æ —Å–ª–æ—Ç–æ–º {slot}, ID —Å–æ–æ–±—â–µ–Ω–∏—è: {event.message.id}")
                            
                            if self.logger:
                                self.logger.log_app_event("PROMPT_SENT", 
                                                      f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–º–ø—Ç–æ–º {request['prompt_id']} (ID: {event.message.id})",
                                                      extra_info={"message_id": event.message.id, "slot": slot})
                            break
            except Exception as e:
                if self.logger:
                    self.logger.log_exception(e, context="–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
        
        @self.client.on(events.NewMessage(chats=self.bot))
        async def handler(event):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞
            try:
                message = event.message
                message_text = message.text or message.message or ""
                has_video = False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥–µ–æ
                if message.media and hasattr(message.media, 'document') and \
                   message.media.document.mime_type and message.media.document.mime_type.startswith('video/'):
                    has_video = True
                
                if self.logger:
                    extra_info = {"has_video": has_video}
                    self.logger.log_incoming(message_text, "Bot", has_video, "VIDEO" if has_video else None, extra_info)
                
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∏–¥–µ–æ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
                if has_video:
                    print(f"\nüé¨ –ü–û–õ–£–ß–ï–ù–û –í–ò–î–ï–û –í –°–û–û–ë–©–ï–ù–ò–ò!")
                    print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {message_text[:50]}...")
                    
                    # –ù–∞—Ö–æ–¥–∏–º —Å–ª–æ—Ç –ø–æ —Ç–µ–∫—Å—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è (–≤ –Ω–µ–º —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ø—Ä–æ–º–ø—Ç)
                    prompt_slot = self.find_slot_by_last_prompt(message_text)
                    print(f"–ù–∞–π–¥–µ–Ω —Å–ª–æ—Ç –ø–æ –ø—Ä–æ–º–ø—Ç—É: {prompt_slot}")
                    
                    if prompt_slot and prompt_slot in self.active_requests:
                        prompt_id = self.active_requests[prompt_slot]['prompt_id']
                        model = self.active_requests[prompt_slot]['model']
                        
                        print(f"–°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ {prompt_id}, –º–æ–¥–µ–ª—å {model}")
                        
                        if self.logger:
                            self.logger.log_app_event("VIDEO_RECEIVED", 
                                                     f"–ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ {prompt_id} –≤ —Å–ª–æ—Ç–µ {prompt_slot}",
                                                     extra_info={"model": model})
                        
                        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
                        await self.video_downloader.download_video(message, prompt_id, model)
                        
                        # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                        self.decrease_model_counter(model)
                        print(f"–£–º–µ–Ω—å—à–µ–Ω —Å—á–µ—Ç—á–∏–∫ –º–æ–¥–µ–ª–∏ {model} –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ: {self.model_limits[model]}/{self.max_model_limit}")
                        
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∏–¥–µ–æ –¥–ª—è —Å–ª–æ—Ç–∞
                        self.video_received[prompt_slot] = True
                        
                        # –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ —Ç–æ–º, —á—Ç–æ –≤–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ –∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
                        if prompt_slot in self.active_requests and 'event' in self.active_requests[prompt_slot]:
                            event_obj = self.active_requests[prompt_slot]['event']
                            event_obj.set()
                    else:
                        # –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª–æ—Ç –ø–æ –ø—Ä–æ–º–ø—Ç—É, –ø—Ä–æ–±—É–µ–º –ø–æ ID –æ—Ç–≤–µ—Ç–∞
                        for slot, request in self.active_requests.items():
                            if 'status_message_id' in request and request['status_message_id'] == message.id:
                                prompt_id = request['prompt_id']
                                model = request['model']
                                
                                if self.logger:
                                    self.logger.log_app_event("VIDEO_RECEIVED_BY_STATUS", 
                                                            f"–ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ {prompt_id} –≤ —Å–ª–æ—Ç–µ {slot}",
                                                            extra_info={"model": model})
                                
                                # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
                                await self.video_downloader.download_video(message, prompt_id, model)
                                
                                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∏–¥–µ–æ –¥–ª—è —Å–ª–æ—Ç–∞
                                self.video_received[slot] = True
                                
                                # –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ —Ç–æ–º, —á—Ç–æ –≤–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ –∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
                                if 'event' in request:
                                    request['event'].set()
                                break
                        else:
                            # –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª–æ—Ç –Ω–∏ –ø–æ –ø—Ä–æ–º–ø—Ç—É, –Ω–∏ –ø–æ ID, —Å–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                            if self.logger:
                                self.logger.log_app_event("VIDEO_RECEIVED_UNKNOWN", 
                                                        "–ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–º–ø—Ç",
                                                        "WARNING")
                            
                            # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
                            await self.video_downloader.download_any_video(message)
                
                # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π...
                print("\n–ü–û–õ–£–ß–ï–ù–û –ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ñ–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è –≤–∏–¥–µ–æ
                message_text = event.message.text or ""
                has_video = (event.message.media and hasattr(event.message.media, 'document') and 
                            event.message.media.document.mime_type.startswith('video/'))
                
                print(f"–¢–µ–∫—Å—Ç: {message_text[:50]}{'...' if len(message_text) > 50 else ''}")
                print(f"–°–æ–¥–µ—Ä–∂–∏—Ç –≤–∏–¥–µ–æ: {has_video}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if self.logger:
                    media_type = None
                    if has_video:
                        media_type = "VIDEO"
                    self.logger.log_incoming(message_text, "Bot", has_video, media_type)
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥
                self.message_logger.log_message(message_text, has_video)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å/–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                if not self.message_filter.should_print_message(message_text, has_video) and not has_video:
                    return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–Ω—ã–º (—Å–æ–¥–µ—Ä–∂–∏—Ç "üìç –í–∞—à –∑–∞–ø—Ä–æ—Å:" –∏–ª–∏ "üìç –ó–∞–ø—Ä–æ—Å:")
                is_status_message = "üìç –í–∞—à –∑–∞–ø—Ä–æ—Å:" in message_text or "üìç –ó–∞–ø—Ä–æ—Å:" in message_text

                # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–ª–æ—Ç/–ø—Ä–æ–º–ø—Ç
                if is_status_message:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                    prompt_match = re.search(r'üìç (?:–í–∞—à )?–∑–∞–ø—Ä–æ—Å:\s*(.+)', message_text, re.IGNORECASE | re.DOTALL)
                    if prompt_match:
                        prompt_text = prompt_match.group(1).strip()
                        
                        # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–ª–æ—Ç
                        for slot, request in self.active_requests.items():
                            if request['prompt'].startswith(prompt_text[:30]) or prompt_text.startswith(request['prompt'][:30]):
                                # –ù–∞—à–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–ª–æ—Ç
                                request['status_message_id'] = event.message.id
                                
                                if self.logger:
                                    self.logger.log_app_event("STATUS_MESSAGE", 
                                                            f"–ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ {request['prompt_id']} –≤ —Å–ª–æ—Ç–µ {slot}",
                                                            extra_info={"message_id": event.message.id})
                                print(f"\nüìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ {request['prompt_id']} (—Å–ª–æ—Ç {slot})")
                                break

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º patterns –∏–∑ MessageFilter
                if any(error_pattern in message_text.lower() for error_pattern in self.message_filter.error_patterns):
                    print("\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏!")
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª–æ—Ç –ø–æ —Ä–µ–ø–ª–∞—é –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
                    slot = self.find_slot_by_reply(event.message) or self.find_slot_by_last_prompt(message_text)
                    
                    if slot:
                        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–ª–æ—Ç, –æ—Ç–º–µ—á–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
                        request = self.active_requests[slot]
                        prompt_id = request['prompt_id']
                        
                        if self.logger:
                            self.logger.log_app_event("VIDEO_ERROR", 
                                                    f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ {prompt_id} –≤ —Å–ª–æ—Ç–µ {slot}",
                                                    "ERROR", 
                                                    {"error_text": message_text[:200]})
                        
                        # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –∫–∞–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏
                        self.table_manager.mark_error(request['prompt_id'], request['model'], message_text[:100])
                        print(f"‚ùå –ü—Ä–æ–º–ø—Ç {prompt_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–π—Å—è —Å –æ—à–∏–±–∫–æ–π")
                        
                        # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
                        self.decrease_model_counter(request['model'])
                        
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–∂–∏–¥–∞—é—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞
                        request['event'].set()
                        return
                    else:
                        # –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª–æ—Ç, –∏—â–µ–º –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                        for active_slot, request in self.active_requests.items():
                            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–± –æ—à–∏–±–∫–µ
                            prompt_preview = request['prompt'][:30].lower()
                            if prompt_preview in message_text.lower():
                                prompt_id = request['prompt_id']
                                
                                if self.logger:
                                    self.logger.log_app_event("VIDEO_ERROR_MATCHED", 
                                                            f"–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ {prompt_id} –≤ —Å–ª–æ—Ç–µ {active_slot}",
                                                            "ERROR", 
                                                            {"error_text": message_text[:200]})
                                
                                # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –∫–∞–∫ –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–π—Å—è —Å –æ—à–∏–±–∫–æ–π
                                self.table_manager.mark_error(request['prompt_id'], request['model'], message_text[:100])
                                print(f"‚ùå –ü—Ä–æ–º–ø—Ç {prompt_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–π—Å—è —Å –æ—à–∏–±–∫–æ–π (–ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É)")
                                
                                # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
                                self.decrease_model_counter(request['model'])
                                
                                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
                                request['event'].set()
                                return

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏ (–∫–∞–∫ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫ –Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏)
                if any(msg in message_text for msg in self.generation_start_messages):
                    self.generation_in_progress = True
                    print("–ù–∞—á–∞–ª–∞—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ...")
                    return
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
                if any(msg in message_text for msg in self.error_messages):
                    for slot, request in list(self.active_requests.items()):
                        print(f"–ü–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞ –æ—Ç –±–æ—Ç–∞ –¥–ª—è —Å–ª–æ—Ç–∞ {slot}")
                        self.table_manager.mark_error(request['prompt_id'], request['model'])
                        # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                        self.decrease_model_counter(request['model'])
                        request['event'].set()
                    return

            except Exception as e:
                if self.logger:
                    self.logger.log_exception(e, context="–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        @self.client.on(events.MessageEdited(chats=self.bot))
        async def edited_handler(event):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            try:
                message_text = event.message.text or ""
                has_video = (hasattr(event.message, 'media') and 
                            event.message.media and 
                            hasattr(event.message.media, 'document') and 
                            event.message.media.document.mime_type.startswith('video/'))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫–æ–º—É-–ª–∏–±–æ —Å—Ç–∞—Ç—É—Å–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                matching_slot = None
                for slot, request in self.active_requests.items():
                    if 'status_message_id' in request and request['status_message_id'] == event.message.id:
                        matching_slot = slot
                        break
                
                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–ª–æ—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                if matching_slot:
                    if self.logger:
                        self.logger.log_app_event("STATUS_UPDATE", 
                                                f"–û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ {self.active_requests[matching_slot]['prompt_id']} –≤ —Å–ª–æ—Ç–µ {matching_slot}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ
                    if any(error_pattern in message_text.lower() for error_pattern in self.message_filter.error_patterns):
                        request = self.active_requests[matching_slot]
                        prompt_id = request['prompt_id']
                        
                        if self.logger:
                            self.logger.log_app_event("VIDEO_ERROR_IN_STATUS", 
                                                    f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤ —Å—Ç–∞—Ç—É—Å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ {prompt_id} –≤ —Å–ª–æ—Ç–µ {matching_slot}",
                                                    "ERROR", 
                                                    {"error_text": message_text[:200]})
                        
                        # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –∫–∞–∫ –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–π—Å—è —Å –æ—à–∏–±–∫–æ–π
                        self.table_manager.mark_error(request['prompt_id'], request['model'], message_text[:100])
                        print(f"‚ùå –ü—Ä–æ–º–ø—Ç {prompt_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–π—Å—è —Å –æ—à–∏–±–∫–æ–π (–∏–∑ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)")
                        
                        # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
                        self.decrease_model_counter(request['model'])
                        
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
                        request['event'].set()
                        return
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if not self.message_filter.should_process_edited_message(message_text, has_video):
                    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    if self.logger and message_text:
                        self.logger.log_app_event("IGNORED_EDIT", 
                                               f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text[:30]}...", 
                                               "DEBUG")
                    return

                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
                if self.logger:
                    self.logger.log_incoming(f"[EDIT] {message_text}", "Bot", has_video, 
                                          "VIDEO" if has_video else None)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏ –≤ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                if any(error_pattern in message_text.lower() for error_pattern in self.message_filter.error_patterns):
                    # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª–æ—Ç –ø–æ —Ä–µ–ø–ª–∞—é –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
                    slot = self.find_slot_by_reply(event.message) or self.find_slot_by_last_prompt(message_text)
                    
                    if slot:
                        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–ª–æ—Ç, –æ—Ç–º–µ—á–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
                        request = self.active_requests[slot]
                        prompt_id = request['prompt_id']
                        
                        if self.logger:
                            self.logger.log_app_event("VIDEO_ERROR", 
                                                    f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ {prompt_id} –≤ —Å–ª–æ—Ç–µ {slot}",
                                                    "ERROR", 
                                                    {"error_text": message_text[:200]})
                        
                        # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –∫–∞–∫ –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–π—Å—è —Å –æ—à–∏–±–∫–æ–π
                        self.table_manager.mark_error(request['prompt_id'], request['model'], message_text[:100])
                        print(f"‚ùå –ü—Ä–æ–º–ø—Ç {prompt_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–π—Å—è —Å –æ—à–∏–±–∫–æ–π (–≤ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)")
                        
                        # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
                        self.decrease_model_counter(request['model'])
                        
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–π –ø–æ—Ç–æ–∫
                        request['event'].set()
                        return
                    else:
                        # –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª–æ—Ç, –∏—â–µ–º –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è
                        for active_slot, request in self.active_requests.items():
                            prompt_preview = request['prompt'][:30].lower()
                            if prompt_preview in message_text.lower():
                                prompt_id = request['prompt_id']
                                
                                if self.logger:
                                    self.logger.log_app_event("VIDEO_ERROR_MATCHED", 
                                                           f"–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ {prompt_id} –≤ —Å–ª–æ—Ç–µ {active_slot}",
                                                           "ERROR", 
                                                           {"error_text": message_text[:200]})
                                
                                # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –∫–∞–∫ –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–π—Å—è —Å –æ—à–∏–±–∫–æ–π
                                self.table_manager.mark_error(request['prompt_id'], request['model'], message_text[:100])
                                print(f"‚ùå –ü—Ä–æ–º–ø—Ç {prompt_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–π—Å—è —Å –æ—à–∏–±–∫–æ–π (–ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É)")
                                
                                # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
                                self.decrease_model_counter(request['model'])
                                
                                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
                                request['event'].set()
                                return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç
                if "üìç –í–∞—à –∑–∞–ø—Ä–æ—Å:" in message_text or "üìç –ó–∞–ø—Ä–æ—Å:" in message_text:
                    try:
                        prompt_match = re.search(r'(?:üìç –í–∞—à –∑–∞–ø—Ä–æ—Å:|üìç –ó–∞–ø—Ä–æ—Å:)\s*(.+)', message_text)
                        if prompt_match:
                            self.received_video_prompt = prompt_match.group(1).strip()
                            
                            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–ª–æ—Ç –ø–æ —Ç–µ–∫—Å—Ç—É –ø—Ä–æ–º–ø—Ç–∞
                            slot = self.find_slot_by_last_prompt(self.received_video_prompt)
                            if slot and self.logger:
                                self.logger.log_app_event("PROMPT_MATCHED", 
                                                       f"–ù–∞–π–¥–µ–Ω —Å–ª–æ—Ç {slot} –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞: {self.received_video_prompt[:30]}...")
                    except Exception as e:
                        if self.logger:
                            self.logger.log_exception(e, context="–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                if has_video:
                    # –ó–¥–µ—Å—å –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ –≤ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–ª–æ—Ç –ø–æ –≤–∏–¥–µ–æ
                    slot = None
                    if self.received_video_prompt:
                        slot = self.find_slot_by_last_prompt(self.received_video_prompt)
                    
                    if slot:
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
                        request = self.active_requests[slot]
                        video_path = await self.download_video(event.message)
                        
                        if video_path:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–∏–¥–µ–æ –ø—Ä–æ–º–ø—Ç—É
                            if self.check_video_matches_prompt(video_path, request['prompt']):
                                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–∂–∏–¥–∞—é—â–∏–π –ø–æ—Ç–æ–∫
                                self.table_manager.mark_success(request['prompt_id'], request['model'])
                                request['event'].set()
                            else:
                                # –í–∏–¥–µ–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ–º–ø—Ç—É
                                if self.logger:
                                    self.logger.log_app_event("VIDEO_MISMATCH",
                                                           f"–í–∏–¥–µ–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ–º–ø—Ç—É –¥–ª—è —Å–ª–æ—Ç–∞ {slot}")
                                self.table_manager.mark_error(request['prompt_id'], request['model'])
                                request['event'].set()

            except Exception as e:
                if self.logger:
                    self.logger.log_exception(e, context="–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")

    def find_slot_by_reply(self, message):
        """–ù–∞—Ö–æ–¥–∏—Ç —Å–ª–æ—Ç –ø–æ —Ä–µ–ø–ª–∞—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if message.reply_to is None:
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—á–∞—é—Ç
        reply_to_msg_id = message.reply_to.reply_to_msg_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        for slot, request in self.active_requests.items():
            if 'sent_message_id' in request and request['sent_message_id'] == reply_to_msg_id:
                return slot
            
        return None

    def find_slot_by_last_prompt(self, message_text):
        """–ù–∞—Ö–æ–¥–∏—Ç —Å–ª–æ—Ç –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ø—Ä–æ–º–ø—Ç—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –º–∞—Ä–∫–¥–∞—É–Ω–æ–º (–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏)
        prompt_match = re.search(r'\*\*üìç (?:–í–∞—à )?–∑–∞–ø—Ä–æ—Å:\*\* `([^`]+)`', message_text, re.IGNORECASE | re.DOTALL)
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –Ω–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
        if not prompt_match:
            prompt_match = re.search(r'üìç (?:–í–∞—à )?–∑–∞–ø—Ä–æ—Å:\s*(.+)', message_text, re.IGNORECASE | re.DOTALL)
            
        if prompt_match:
            prompt_text = prompt_match.group(1).strip()
            print(f"–ò–∑–≤–ª–µ—á–µ–Ω —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: {prompt_text[:50]}...")
            
            # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–ª–æ—Ç
            for slot, request in self.active_requests.items():
                print(f"–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–æ–º–ø—Ç–æ–º –≤ —Å–ª–æ—Ç–µ {slot}: {request['prompt'][:50]}...")
                if request['prompt'].startswith(prompt_text[:30]) or prompt_text.startswith(request['prompt'][:30]):
                    print(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –≤ —Å–ª–æ—Ç–µ {slot}!")
                    return slot
                
                # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª–µ–µ –≥–∏–±–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                similarity_threshold = 0.7  # –ü–æ—Ä–æ–≥ —Å—Ö–æ–¥—Å—Ç–≤–∞ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
                prompt_words = set(request['prompt'].lower().split()[:20])  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 20 —Å–ª–æ–≤
                text_words = set(prompt_text.lower().split()[:20])
                
                common_words = prompt_words.intersection(text_words)
                if len(common_words) >= min(len(prompt_words), len(text_words)) * similarity_threshold:
                    print(f"–ù–∞–π–¥–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –≤ —Å–ª–æ—Ç–µ {slot}!")
                    return slot
            
        return None

    async def wait_for_any_video(self):
        """–û–∂–∏–¥–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –ª—é–±–æ–≥–æ –≤–∏–¥–µ–æ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–ª–æ—Ç–æ–≤"""
        video_received = asyncio.Event()
        
        @self.client.on(events.NewMessage(chats=self.bot))
        async def temp_handler(event):
            if event.message.media and hasattr(event.message.media, 'document'):
                if event.message.media.document.mime_type.startswith('video/'):
                    video_received.set()
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                    self.client.remove_event_handler(temp_handler)

        try:
            await asyncio.wait_for(video_received.wait(), timeout=self.wait_time)
            return True
        except asyncio.TimeoutError:
            print("–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–ª–æ—Ç–æ–≤")
            return False

    async def cleanup_active_slots(self):
        """–û—á–∏—â–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ª–æ—Ç—ã –∏–∑ –ø—Ä–æ—à–ª–æ–π —Å–µ—Å—Å–∏–∏"""
        try:
            print("–û—á–∏—Å—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –∏–∑ –ø—Ä–æ—à–ª–æ–π —Å–µ—Å—Å–∏–∏...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
            if self.table_manager:
                active_prompts = self.table_manager.get_active_prompts()
                if active_prompts:
                    for prompt in active_prompts:
                        prompt_id = prompt.get('id')
                        slot = prompt.get('slot')
                        if prompt_id and slot:
                            print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ª–æ—Ç {slot} –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ {prompt_id} –∏–∑ –ø—Ä–æ—à–ª–æ–π —Å–µ—Å—Å–∏–∏")
                            if self.logger:
                                self.logger.log_app_event("CLEANUP", 
                                                        f"–û—á–∏—Å—Ç–∫–∞ —Å–ª–æ—Ç–∞ {slot} (–ø—Ä–æ–º–ø—Ç {prompt_id}) –∏–∑ –ø—Ä–æ—à–ª–æ–π —Å–µ—Å—Å–∏–∏")
                            
                            self.table_manager.mark_error(prompt_id, "", "–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")
                            print(f"–°–ª–æ—Ç {slot} –æ—á–∏—â–µ–Ω –∏ –ø—Ä–æ–º–ø—Ç {prompt_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —Å –æ—à–∏–±–∫–æ–π")
            elif hasattr(self.video_downloader, 'table_manager'):
                # –ï—Å–ª–∏ table_manager –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –Ω–æ –µ—Å—Ç—å –≤ video_downloader
                table_manager = self.video_downloader.table_manager
                active_prompts = table_manager.get_active_prompts()
                if active_prompts:
                    for prompt in active_prompts:
                        prompt_id = prompt.get('id')
                        slot = prompt.get('slot')
                        if prompt_id and slot:
                            print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ª–æ—Ç {slot} –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ {prompt_id} –∏–∑ –ø—Ä–æ—à–ª–æ–π —Å–µ—Å—Å–∏–∏")
                            if self.logger:
                                self.logger.log_app_event("CLEANUP", 
                                                        f"–û—á–∏—Å—Ç–∫–∞ —Å–ª–æ—Ç–∞ {slot} (–ø—Ä–æ–º–ø—Ç {prompt_id}) –∏–∑ –ø—Ä–æ—à–ª–æ–π —Å–µ—Å—Å–∏–∏")
                            
                            table_manager.mark_error(prompt_id, "", "–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")
                            print(f"–°–ª–æ—Ç {slot} –æ—á–∏—â–µ–Ω –∏ –ø—Ä–æ–º–ø—Ç {prompt_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —Å –æ—à–∏–±–∫–æ–π")
            else:
                print("–í–Ω–∏–º–∞–Ω–∏–µ: table_manager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –æ—á–∏—Å—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                if self.logger:
                    self.logger.log_app_event("WARNING", 
                                            "table_manager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –æ—á–∏—Å—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
                                            "WARNING")
                                            
            # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ª–æ—Ç—ã
            self.active_requests = {}
            if self.logger:
                self.logger.log_app_event("CLEANUP_COMPLETE", "–û—á–∏—Å—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {e}")
            if self.logger:
                self.logger.log_exception(e, context="–ü—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")

    def get_table_manager(self):
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ table_manager
        
        Returns:
            TableManager –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        """
        if hasattr(self, 'table_manager') and self.table_manager:
            return self.table_manager
        elif hasattr(self.video_downloader, 'table_manager'):
            return self.video_downloader.table_manager
        return None